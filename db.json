{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/sonic/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/images/aerial.png","path":"css/images/aerial.png","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/images/cluster.png","path":"css/images/cluster.png","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/images/portrait.jpg","path":"css/images/portrait.jpg","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/images/ring.png","path":"css/images/ring.png","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/sonic/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/sonic/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1486062152000},{"_id":"themes/sonic/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1486062152000},{"_id":"themes/sonic/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1486062152000},{"_id":"themes/sonic/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1486062152000},{"_id":"themes/sonic/_config.yml","hash":"d33e3ecf7eee04b4328aebf595c0b3786a52c4b7","modified":1486744784000},{"_id":"themes/sonic/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1486062152000},{"_id":"source/About/index.md","hash":"7817ba404fa111b29f00946cc79cdcb013054b03","modified":1486733828000},{"_id":"source/_posts/.DS_Store","hash":"7201c8292d07fa4fe62b8fc379bd577c0457d543","modified":1486655988000},{"_id":"source/_posts/Don-t-block-your-Async-calls.md","hash":"8a626e8f10786fc625064191eacbe1056bbd6551","modified":1492718313000},{"_id":"source/_posts/Dropping-in-on-my-cluster.md","hash":"e10550b15d37c69b52dc1a7b155d21ff1bf65ff3","modified":1487003719000},{"_id":"source/_posts/I-m-Sure-You-Weren-t-Looking.md","hash":"4bbf894490655fcebc454249cdba90c91776c789","modified":1486504560000},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s.md","hash":"b18d2189536545d5012f42eb1ad8077c07c2ff3b","modified":1486760678000},{"_id":"themes/sonic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1486062152000},{"_id":"themes/sonic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1486062152000},{"_id":"themes/sonic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1486062152000},{"_id":"themes/sonic/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1486062152000},{"_id":"themes/sonic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1486062152000},{"_id":"themes/sonic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1486062152000},{"_id":"themes/sonic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1486062152000},{"_id":"themes/sonic/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1486062152000},{"_id":"themes/sonic/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1486062152000},{"_id":"themes/sonic/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1486062152000},{"_id":"themes/sonic/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1486062152000},{"_id":"themes/sonic/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1486062152000},{"_id":"themes/sonic/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486062152000},{"_id":"themes/sonic/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1486062152000},{"_id":"themes/sonic/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1486062152000},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberrypi.jpg","hash":"272317ca80eae327245bf68500f7c56c353b2dd5","modified":1486588734000},{"_id":"themes/sonic/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/header.ejs","hash":"3e26f3453d581d76e62512fe2c90b56a0ab4e5d0","modified":1486758694000},{"_id":"themes/sonic/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1486062152000},{"_id":"themes/sonic/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1486062152000},{"_id":"themes/sonic/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1486062152000},{"_id":"themes/sonic/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1486062152000},{"_id":"themes/sonic/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1486062152000},{"_id":"themes/sonic/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1486062152000},{"_id":"themes/sonic/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1486062152000},{"_id":"themes/sonic/source/css/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1486477097000},{"_id":"themes/sonic/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1486062152000},{"_id":"themes/sonic/source/css/style.styl","hash":"eff7ea0c1c85f78fa5b64b82bcf7c7490f5db7b9","modified":1486746726000},{"_id":"themes/sonic/source/css/_variables.styl","hash":"8baf64b83bbb118d8191a6e6d7b56b82fbaa5b9d","modified":1486658549000},{"_id":"themes/sonic/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1486062152000},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/opscenter_cluster.png","hash":"b52da9fb9e980ead1b60435f4adf26ee60ee1150","modified":1486671546000},{"_id":"themes/sonic/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1486062152000},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/pie-pi.jpg","hash":"d93f3955eecc84e21ce33ed9e560016bb62a224e","modified":1486563203000},{"_id":"themes/sonic/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1486062152000},{"_id":"themes/sonic/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1486062152000},{"_id":"themes/sonic/source/css/_partial/archive.styl","hash":"203a8803642438c4389dde5b8158e803f556f5eb","modified":1486489179000},{"_id":"themes/sonic/source/css/_partial/article.styl","hash":"5628c0f28e1e6d257e5ee172a32a9322b0362d9a","modified":1486746745000},{"_id":"themes/sonic/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1486062152000},{"_id":"themes/sonic/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1486062152000},{"_id":"themes/sonic/source/css/_partial/header.styl","hash":"b40437472ec4151355b82a67ae0ca07e23395e82","modified":1486487251000},{"_id":"themes/sonic/source/css/_partial/highlight.styl","hash":"8677f7dc62a69679df3f10fafa67b78cbe84521a","modified":1486659453000},{"_id":"themes/sonic/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1486062152000},{"_id":"themes/sonic/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1486062152000},{"_id":"themes/sonic/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1486062152000},{"_id":"themes/sonic/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1486487869000},{"_id":"themes/sonic/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1486062152000},{"_id":"themes/sonic/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1486062152000},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1486062152000},{"_id":"themes/sonic/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1486062152000},{"_id":"themes/sonic/source/css/images/aerial.png","hash":"9280b24baa6825b909b557f153cfd564bb310302","modified":1486398762000},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1486062152000},{"_id":"themes/sonic/source/css/images/cluster.png","hash":"05fd049eaea1edc121d3ee7beb70050998b92141","modified":1486398952000},{"_id":"themes/sonic/source/css/images/portrait.jpg","hash":"7b1c23db69ed4870f8444d685d50070d3adf9df1","modified":1486395745000},{"_id":"themes/sonic/source/css/images/ring.png","hash":"86b8b08b45634a1d425baacf15bb28742f8201f1","modified":1486407903000},{"_id":"themes/sonic/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486062152000},{"_id":"themes/sonic/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1486062152000},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberry.jpg","hash":"0f426be98f54895b574ebcf4ca9ebc1378b823d9","modified":1486563203000},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1486062152000},{"_id":"themes/sonic/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1486062152000},{"_id":"themes/sonic/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1486062152000},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/myPIs.gif","hash":"c4fcede0402ea86cdb7c8456dead47112caa3189","modified":1486654238000},{"_id":"source/_posts/Dropping-in-on-my-cluster/datastax_drop.gif","hash":"ea2bb1ac95206e178572205412fd7f8da36645b8","modified":1487003427000},{"_id":"public/content.json","hash":"1c50cec1fa8552b14e7d8856ae4849b8a5dfbe54","modified":1515511458612},{"_id":"public/About/index.html","hash":"ee4bd694e0b979eac72e0cd35667045e24dfe39b","modified":1515511458756},{"_id":"public/2017/02/13/Dropping-in-on-my-cluster/index.html","hash":"4a0d8e968669c1edc2c38837e48a6d156c600c38","modified":1515511458756},{"_id":"public/2017/02/07/I-m-Sure-You-Weren-t-Looking/index.html","hash":"26fa7b2bd3d30dd5534283155e06440e5b3df0fe","modified":1515511458756},{"_id":"public/archives/index.html","hash":"cc4347027f64d2f43594f63bcf21d7fa5c138de6","modified":1515511458757},{"_id":"public/archives/2017/index.html","hash":"59c9d05d44a25576d76c9134db6e884824632aeb","modified":1515511458757},{"_id":"public/archives/2017/02/index.html","hash":"acb254ffe031e5fa4bd07beb7b231b22d2291854","modified":1515511458757},{"_id":"public/archives/2017/04/index.html","hash":"7715f3b30d4fbf21ff7c5acf5f2b3de7699c100a","modified":1515511458757},{"_id":"public/categories/Technical/index.html","hash":"6e26251fec7fcf02ee534a07496f3718635400f0","modified":1515511458757},{"_id":"public/categories/Aerial/index.html","hash":"2d14513f915e6809d1f25723e57cb18e09d4dbba","modified":1515511458757},{"_id":"public/categories/Something-Else/index.html","hash":"bdd95221f22acc36c513cfd2655e23a6df22ff17","modified":1515511458757},{"_id":"public/tags/TIL/index.html","hash":"ba4ee311319c7100ee77246a95c715f8e0eef0dc","modified":1515511458757},{"_id":"public/tags/async/index.html","hash":"cb819076135094982001cd4c09350896719bd07e","modified":1515511458757},{"_id":"public/tags/blocking/index.html","hash":"4c5eb02900a05bdd978ca342787b79cc7f1ffa92","modified":1515511458757},{"_id":"public/tags/java/index.html","hash":"58d1b92fe905a4464a8241a25f1d7adba1e8946a","modified":1515511458757},{"_id":"public/tags/killrvideo/index.html","hash":"c4f23b3be233a61dc84d23c52d235e29a3ffce79","modified":1515511458757},{"_id":"public/tags/datastax/index.html","hash":"a1f77f54fc3185b2766a653446b4ec10a2a8e13d","modified":1515511458758},{"_id":"public/tags/opscenter/index.html","hash":"b68c440d87fe0e28c52364c50ac917ecd545a919","modified":1515511458758},{"_id":"public/tags/aerial/index.html","hash":"a50bb2b8c99719beb34789370dc1c8c308bfad43","modified":1515511458758},{"_id":"public/tags/drop/index.html","hash":"5e8567ecbf5de3070c56ab6a55b026b41a18a00e","modified":1515511458758},{"_id":"public/tags/hi-there/index.html","hash":"778c2cbfc0e072e5210f097990226b770dc533aa","modified":1515511458758},{"_id":"public/tags/welcome/index.html","hash":"6508189e0c409d90dcfd5a4d059817545d51280f","modified":1515511458759},{"_id":"public/tags/fun-times/index.html","hash":"0dfb305ebb0158eef084efc6a78f1c0acec25aff","modified":1515511458759},{"_id":"public/tags/OMG/index.html","hash":"9408333e28c877af3fb1bc558345639fff217a41","modified":1515511458759},{"_id":"public/tags/raspberry-PI/index.html","hash":"03d28d3ed77cddc27a27743d966dfe8a3a42117f","modified":1515511458759},{"_id":"public/tags/cluster/index.html","hash":"6547050e3a8647039d0f861cc70c20c31572f650","modified":1515511458759},{"_id":"public/2017/04/17/Don-t-block-your-Async-calls/index.html","hash":"fa0f9d3951ec46d4b43c61fe512fa93a9908df0b","modified":1515511458759},{"_id":"public/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/index.html","hash":"b477b0f24bb3a557c96cd26bd1f0fd3d6054c1b4","modified":1515511458759},{"_id":"public/index.html","hash":"902ef2b38f116fc88e3f5d6b8af79770247c0166","modified":1515511458759},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515511458775},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515511458775},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515511458775},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515511458775},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515511458775},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1515511458776},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1515511458776},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515511458776},{"_id":"public/css/images/aerial.png","hash":"9280b24baa6825b909b557f153cfd564bb310302","modified":1515511458776},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1515511458776},{"_id":"public/css/images/cluster.png","hash":"05fd049eaea1edc121d3ee7beb70050998b92141","modified":1515511458776},{"_id":"public/css/images/portrait.jpg","hash":"7b1c23db69ed4870f8444d685d50070d3adf9df1","modified":1515511458776},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515511458776},{"_id":"public/css/images/ring.png","hash":"86b8b08b45634a1d425baacf15bb28742f8201f1","modified":1515511458776},{"_id":"public/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberrypi.jpg","hash":"272317ca80eae327245bf68500f7c56c353b2dd5","modified":1515511458776},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1515511459544},{"_id":"public/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/opscenter_cluster.png","hash":"b52da9fb9e980ead1b60435f4adf26ee60ee1150","modified":1515511459547},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1515511459550},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1515511459550},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515511459550},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1515511459551},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1515511459551},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515511459551},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1515511459551},{"_id":"public/css/style.css","hash":"49fd3973b38875d6beccfbe16691632784d7eeba","modified":1515511459551},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1515511459551},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1515511459551},{"_id":"public/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/pie-pi.jpg","hash":"d93f3955eecc84e21ce33ed9e560016bb62a224e","modified":1515511459551},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1515511459553},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1515511459553},{"_id":"public/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberry.jpg","hash":"0f426be98f54895b574ebcf4ca9ebc1378b823d9","modified":1515511459553},{"_id":"public/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/myPIs.gif","hash":"c4fcede0402ea86cdb7c8456dead47112caa3189","modified":1515511459570},{"_id":"public/2017/02/13/Dropping-in-on-my-cluster/datastax_drop.gif","hash":"ea2bb1ac95206e178572205412fd7f8da36645b8","modified":1515511459579}],"Category":[{"name":"Technical","_id":"cjc7se4zy0003fpkmukt5q64n"},{"name":"Aerial","_id":"cjc7se5050007fpkmr1thhk8m"},{"name":"Something Else","_id":"cjc7se50c000afpkmcc4oovzg"}],"Data":[],"Page":[{"title":"About me","date":"2017-02-06T20:54:38.000Z","_content":"Hi there, I'm David Gilardi, a nerd, sci-fi, fantasy enthusiast who would like nothing more than to get on the Starship Enterprise (or anything remotely like it that won't explode on its first voyage) and explore the universe.  Until that happens I'll continue playing games, building distributed database clusters, climbing up multi-story strips of fabric while calling it \"art\", and \"improving\" every bit of my house that I can.\n\n## You mentioned distributed databases\nYuppers.  I'm currently a Technical Evangelist at DataStax and let me tell you after 20+ years in my career coding, DBAing, building bare metal and cloud infrastructure, and managing I am a happy camper getting back into some seriously cool tech.  I have a mixed-workload search/graph/Cassandra cluster using 4 Raspberry PI's for my core Cassandra DC.  You can't get much more commodity hardware than PI's and my cluster is humming along quite nicely.\n\n## Strips of fabric?\nYes!  One of my favorite activities is aerial arts.  Seriously, drop the gym, start climbing stuff and your body will thank you.  It also might reward you with some torn, ripped, pulled tendons, ligaments, and muscles, but no matter.  It's all earned pain.  I realize I don't make it sound all that great, but after 5 years I'm still in one piece and love every moment of it (most of the time).\n\nHere is a fun example.  Sorry for the potato quality, it won't happen again.  Turn up the sound and wait for the end. \n{% youtube RywLBWQcrys %}","source":"About/index.md","raw":"---\ntitle: About me\ndate: 2017-02-06 15:54:38\n---\nHi there, I'm David Gilardi, a nerd, sci-fi, fantasy enthusiast who would like nothing more than to get on the Starship Enterprise (or anything remotely like it that won't explode on its first voyage) and explore the universe.  Until that happens I'll continue playing games, building distributed database clusters, climbing up multi-story strips of fabric while calling it \"art\", and \"improving\" every bit of my house that I can.\n\n## You mentioned distributed databases\nYuppers.  I'm currently a Technical Evangelist at DataStax and let me tell you after 20+ years in my career coding, DBAing, building bare metal and cloud infrastructure, and managing I am a happy camper getting back into some seriously cool tech.  I have a mixed-workload search/graph/Cassandra cluster using 4 Raspberry PI's for my core Cassandra DC.  You can't get much more commodity hardware than PI's and my cluster is humming along quite nicely.\n\n## Strips of fabric?\nYes!  One of my favorite activities is aerial arts.  Seriously, drop the gym, start climbing stuff and your body will thank you.  It also might reward you with some torn, ripped, pulled tendons, ligaments, and muscles, but no matter.  It's all earned pain.  I realize I don't make it sound all that great, but after 5 years I'm still in one piece and love every moment of it (most of the time).\n\nHere is a fun example.  Sorry for the potato quality, it won't happen again.  Turn up the sound and wait for the end. \n{% youtube RywLBWQcrys %}","updated":"2017-02-10T13:37:08.000Z","path":"About/index.html","comments":1,"layout":"page","_id":"cjc7se4zq0000fpkm702fy2qp","content":"<p>Hi there, I’m David Gilardi, a nerd, sci-fi, fantasy enthusiast who would like nothing more than to get on the Starship Enterprise (or anything remotely like it that won’t explode on its first voyage) and explore the universe.  Until that happens I’ll continue playing games, building distributed database clusters, climbing up multi-story strips of fabric while calling it “art”, and “improving” every bit of my house that I can.</p>\n<h2 id=\"You-mentioned-distributed-databases\"><a href=\"#You-mentioned-distributed-databases\" class=\"headerlink\" title=\"You mentioned distributed databases\"></a>You mentioned distributed databases</h2><p>Yuppers.  I’m currently a Technical Evangelist at DataStax and let me tell you after 20+ years in my career coding, DBAing, building bare metal and cloud infrastructure, and managing I am a happy camper getting back into some seriously cool tech.  I have a mixed-workload search/graph/Cassandra cluster using 4 Raspberry PI’s for my core Cassandra DC.  You can’t get much more commodity hardware than PI’s and my cluster is humming along quite nicely.</p>\n<h2 id=\"Strips-of-fabric\"><a href=\"#Strips-of-fabric\" class=\"headerlink\" title=\"Strips of fabric?\"></a>Strips of fabric?</h2><p>Yes!  One of my favorite activities is aerial arts.  Seriously, drop the gym, start climbing stuff and your body will thank you.  It also might reward you with some torn, ripped, pulled tendons, ligaments, and muscles, but no matter.  It’s all earned pain.  I realize I don’t make it sound all that great, but after 5 years I’m still in one piece and love every moment of it (most of the time).</p>\n<p>Here is a fun example.  Sorry for the potato quality, it won’t happen again.  Turn up the sound and wait for the end.<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/RywLBWQcrys\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n","excerpt":"","more":"<p>Hi there, I’m David Gilardi, a nerd, sci-fi, fantasy enthusiast who would like nothing more than to get on the Starship Enterprise (or anything remotely like it that won’t explode on its first voyage) and explore the universe.  Until that happens I’ll continue playing games, building distributed database clusters, climbing up multi-story strips of fabric while calling it “art”, and “improving” every bit of my house that I can.</p>\n<h2 id=\"You-mentioned-distributed-databases\"><a href=\"#You-mentioned-distributed-databases\" class=\"headerlink\" title=\"You mentioned distributed databases\"></a>You mentioned distributed databases</h2><p>Yuppers.  I’m currently a Technical Evangelist at DataStax and let me tell you after 20+ years in my career coding, DBAing, building bare metal and cloud infrastructure, and managing I am a happy camper getting back into some seriously cool tech.  I have a mixed-workload search/graph/Cassandra cluster using 4 Raspberry PI’s for my core Cassandra DC.  You can’t get much more commodity hardware than PI’s and my cluster is humming along quite nicely.</p>\n<h2 id=\"Strips-of-fabric\"><a href=\"#Strips-of-fabric\" class=\"headerlink\" title=\"Strips of fabric?\"></a>Strips of fabric?</h2><p>Yes!  One of my favorite activities is aerial arts.  Seriously, drop the gym, start climbing stuff and your body will thank you.  It also might reward you with some torn, ripped, pulled tendons, ligaments, and muscles, but no matter.  It’s all earned pain.  I realize I don’t make it sound all that great, but after 5 years I’m still in one piece and love every moment of it (most of the time).</p>\n<p>Here is a fun example.  Sorry for the potato quality, it won’t happen again.  Turn up the sound and wait for the end.<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/RywLBWQcrys\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n"}],"Post":[{"title":"Don't block your Async calls","date":"2017-04-17T14:31:42.000Z","_content":"Or rather I should be saying that to myself.  So, TIL (today I learned) something simple yet profound while working with asynchronous programming and the [DSE java driver][dsejava].  Ensure that you are properly iterating through your results when making an async call.  You cannot simply iterate all of your rows using a for loop or something along the lines.  Ok, well, technically you can, but if you have more rows than your fetch size the [DSE java driver][dsejava] will throw a big fat error your way letting you know you are blocking within an async call.  I should point that I am still somewhat new to working with asynchronous calls (yes, someone finally pulled up the rock I was under) so for you veterans this may be knowledge already gained from async NOOB 101.  By the way, here is the error the driver threw at me (thank you for doing so DSE driver peeps).\n\n<!-- more -->\n\n```java\nDetected a synchronous call on an I/O thread, this can cause deadlocks or unpredictable behavior. This generally happens when a Future callback calls a synchronous Session method (execute() or prepare()), or iterates a result set past the fetch size (causing an internal synchronous fetch of the next page of results). Avoid this in your callbacks, or schedule them on a different executor.\n\tcom.datastax.driver.core.AbstractSession.checkNotInEventLoop(AbstractSession.java:206)\n\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.prepareNextRow(ArrayBackedResultSet.java:310)\n\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.isExhausted(ArrayBackedResultSet.java:269)\n\tcom.datastax.driver.core.ArrayBackedResultSet$1.hasNext(ArrayBackedResultSet.java:143)\n\tcom.datastax.driver.mapping.Result$1.hasNext(Result.java:102...\n```\n\nThe reason is stated [here][asyncpaging].  I'll quote it just to be clear \"If you consume a ResultSet in a callback, be aware that iterating the rows will trigger synchronous queries as you page through the results. To avoid this, use getAvailableWithoutFetching to limit the iteration to the current page, and fetchMoreResults to get a future to the next page\".  Even though I read this before I started into this code I must have glossed over this concept the first time through as my implementation was acting very strange indeed.\n\nLet's look at a simple example.  At this point in my code I already made an aynchronous call with session.executeAsync(), created a future, and returned my results into a callback.  The following examples are within my callback.\nIn the case below I mapped my results to the UserVideos entity and now I am iterating through those results to do something with each \"userVideo\" object.\nThis...DOES NOT work and will throw the error I mentioned above.\n\n*Ehem, I have a utility class handle callbacks if you were wondering where that was.  I wanted to keep the example nice and simple.  Just know that by the time you see \".handle\" we are within the callback.*\n```java\n        FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))\n                .handle((userVideos, ex) -> {\n                    try {\n                        if (userVideos != null) {\n                            for (UserVideos userVideo : userVideos) {\n                                \"do something with userVideo here\"\n                            }\n\n```\nIt seems so simple.  I returned my results and now I want to iterate over those results and do something with them, but these aren't synchronous calls that block until complete.  I need to handle them properly from an asynchronous standpoint and only grab those results that have actually been returned.  The rest I will need to fetch with more asynchronous calls.\n\nAgain, this is demonstrated very clearly [here][asyncpaging] in the Async paging section.\n\nThis...is a snippet pulled from the working code using the example given from the [async][asyncpaging] page I keep referencing.  Now, I see how many items I have remaining without fetching, loop through the remaining items, and break out once I have exhausted the list.  You may not see in my example below, but once I \"break;\" I exit out and grab futures for any more items that may be left, rinse and repeat.   \n```java\n        FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))\n                .handle((userVideos, ex) -> {\n                    try {\n                        if (userVideos != null) {\n                            int remaining = userVideos.getAvailableWithoutFetching();\n                            for (UserVideos userVideo : userVideos) {\n                                \"do something with userVideo here\"\n\n                                if (--remaining == 0) {\n                                    break;\n                                }\n                            }\n```\nThe whole point of this post was to point out a potential \"gotcha\" with a very simple fix when dealing with asynchronous programming and the [DSE driver for Java][dsejava].  This one tripped me up for a moment until I realized my mistake.  Now that I know better my \"futures\" are looking bright in deed....see my joke there....ha....haha.....ha...*awkward pause*.  Honestly, this simple change tightend all of my async code up.  No more strange artifacts\n\n\n\n[dsejava]: http://docs.datastax.com/en/developer/java-driver/3.2/\n[asyncprogramming]: http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/\n[asyncpaging]: http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging","source":"_posts/Don-t-block-your-Async-calls.md","raw":"---\ntitle: Don't block your Async calls\ndate: 2017-04-17 10:31:42\ntags:\n    - TIL\n    - async\n    - blocking\n    - java\n    - killrvideo\ncategories:\n    - Technical\n---\nOr rather I should be saying that to myself.  So, TIL (today I learned) something simple yet profound while working with asynchronous programming and the [DSE java driver][dsejava].  Ensure that you are properly iterating through your results when making an async call.  You cannot simply iterate all of your rows using a for loop or something along the lines.  Ok, well, technically you can, but if you have more rows than your fetch size the [DSE java driver][dsejava] will throw a big fat error your way letting you know you are blocking within an async call.  I should point that I am still somewhat new to working with asynchronous calls (yes, someone finally pulled up the rock I was under) so for you veterans this may be knowledge already gained from async NOOB 101.  By the way, here is the error the driver threw at me (thank you for doing so DSE driver peeps).\n\n<!-- more -->\n\n```java\nDetected a synchronous call on an I/O thread, this can cause deadlocks or unpredictable behavior. This generally happens when a Future callback calls a synchronous Session method (execute() or prepare()), or iterates a result set past the fetch size (causing an internal synchronous fetch of the next page of results). Avoid this in your callbacks, or schedule them on a different executor.\n\tcom.datastax.driver.core.AbstractSession.checkNotInEventLoop(AbstractSession.java:206)\n\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.prepareNextRow(ArrayBackedResultSet.java:310)\n\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.isExhausted(ArrayBackedResultSet.java:269)\n\tcom.datastax.driver.core.ArrayBackedResultSet$1.hasNext(ArrayBackedResultSet.java:143)\n\tcom.datastax.driver.mapping.Result$1.hasNext(Result.java:102...\n```\n\nThe reason is stated [here][asyncpaging].  I'll quote it just to be clear \"If you consume a ResultSet in a callback, be aware that iterating the rows will trigger synchronous queries as you page through the results. To avoid this, use getAvailableWithoutFetching to limit the iteration to the current page, and fetchMoreResults to get a future to the next page\".  Even though I read this before I started into this code I must have glossed over this concept the first time through as my implementation was acting very strange indeed.\n\nLet's look at a simple example.  At this point in my code I already made an aynchronous call with session.executeAsync(), created a future, and returned my results into a callback.  The following examples are within my callback.\nIn the case below I mapped my results to the UserVideos entity and now I am iterating through those results to do something with each \"userVideo\" object.\nThis...DOES NOT work and will throw the error I mentioned above.\n\n*Ehem, I have a utility class handle callbacks if you were wondering where that was.  I wanted to keep the example nice and simple.  Just know that by the time you see \".handle\" we are within the callback.*\n```java\n        FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))\n                .handle((userVideos, ex) -> {\n                    try {\n                        if (userVideos != null) {\n                            for (UserVideos userVideo : userVideos) {\n                                \"do something with userVideo here\"\n                            }\n\n```\nIt seems so simple.  I returned my results and now I want to iterate over those results and do something with them, but these aren't synchronous calls that block until complete.  I need to handle them properly from an asynchronous standpoint and only grab those results that have actually been returned.  The rest I will need to fetch with more asynchronous calls.\n\nAgain, this is demonstrated very clearly [here][asyncpaging] in the Async paging section.\n\nThis...is a snippet pulled from the working code using the example given from the [async][asyncpaging] page I keep referencing.  Now, I see how many items I have remaining without fetching, loop through the remaining items, and break out once I have exhausted the list.  You may not see in my example below, but once I \"break;\" I exit out and grab futures for any more items that may be left, rinse and repeat.   \n```java\n        FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))\n                .handle((userVideos, ex) -> {\n                    try {\n                        if (userVideos != null) {\n                            int remaining = userVideos.getAvailableWithoutFetching();\n                            for (UserVideos userVideo : userVideos) {\n                                \"do something with userVideo here\"\n\n                                if (--remaining == 0) {\n                                    break;\n                                }\n                            }\n```\nThe whole point of this post was to point out a potential \"gotcha\" with a very simple fix when dealing with asynchronous programming and the [DSE driver for Java][dsejava].  This one tripped me up for a moment until I realized my mistake.  Now that I know better my \"futures\" are looking bright in deed....see my joke there....ha....haha.....ha...*awkward pause*.  Honestly, this simple change tightend all of my async code up.  No more strange artifacts\n\n\n\n[dsejava]: http://docs.datastax.com/en/developer/java-driver/3.2/\n[asyncprogramming]: http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/\n[asyncpaging]: http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging","slug":"Don-t-block-your-Async-calls","published":1,"updated":"2017-04-20T19:58:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7se4zs0001fpkm6asl2hik","content":"<p>Or rather I should be saying that to myself.  So, TIL (today I learned) something simple yet profound while working with asynchronous programming and the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/\" target=\"_blank\" rel=\"external\">DSE java driver</a>.  Ensure that you are properly iterating through your results when making an async call.  You cannot simply iterate all of your rows using a for loop or something along the lines.  Ok, well, technically you can, but if you have more rows than your fetch size the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/\" target=\"_blank\" rel=\"external\">DSE java driver</a> will throw a big fat error your way letting you know you are blocking within an async call.  I should point that I am still somewhat new to working with asynchronous calls (yes, someone finally pulled up the rock I was under) so for you veterans this may be knowledge already gained from async NOOB 101.  By the way, here is the error the driver threw at me (thank you for doing so DSE driver peeps).</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Detected a synchronous call on an I/O thread, <span class=\"keyword\">this</span> can cause deadlocks or unpredictable behavior. <span class=\"function\">This generally happens when a Future callback calls a synchronous Session <span class=\"title\">method</span> <span class=\"params\">(execute()</span> or <span class=\"title\">prepare</span><span class=\"params\">()</span>), or iterates a result set past the fetch <span class=\"title\">size</span> <span class=\"params\">(causing an internal synchronous fetch of the next page of results)</span>. Avoid <span class=\"keyword\">this</span> in your callbacks, or schedule them on a different executor.</span></div><div class=\"line\">\tcom.datastax.driver.core.AbstractSession.<span class=\"title\">checkNotInEventLoop</span><span class=\"params\">(AbstractSession.java:<span class=\"number\">206</span>)</span></div><div class=\"line\">\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.<span class=\"title\">prepareNextRow</span><span class=\"params\">(ArrayBackedResultSet.java:<span class=\"number\">310</span>)</span></div><div class=\"line\">\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.<span class=\"title\">isExhausted</span><span class=\"params\">(ArrayBackedResultSet.java:<span class=\"number\">269</span>)</span></div><div class=\"line\">\tcom.datastax.driver.core.ArrayBackedResultSet$1.<span class=\"title\">hasNext</span><span class=\"params\">(ArrayBackedResultSet.java:<span class=\"number\">143</span>)</span></div><div class=\"line\">\tcom.datastax.driver.mapping.Result$1.<span class=\"title\">hasNext</span><span class=\"params\">(Result.java:<span class=\"number\">102.</span>..</span></div></pre></td></tr></table></figure>\n<p>The reason is stated <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging\" target=\"_blank\" rel=\"external\">here</a>.  I’ll quote it just to be clear “If you consume a ResultSet in a callback, be aware that iterating the rows will trigger synchronous queries as you page through the results. To avoid this, use getAvailableWithoutFetching to limit the iteration to the current page, and fetchMoreResults to get a future to the next page”.  Even though I read this before I started into this code I must have glossed over this concept the first time through as my implementation was acting very strange indeed.</p>\n<p>Let’s look at a simple example.  At this point in my code I already made an aynchronous call with session.executeAsync(), created a future, and returned my results into a callback.  The following examples are within my callback.<br>In the case below I mapped my results to the UserVideos entity and now I am iterating through those results to do something with each “userVideo” object.<br>This…DOES NOT work and will throw the error I mentioned above.</p>\n<p><em>Ehem, I have a utility class handle callbacks if you were wondering where that was.  I wanted to keep the example nice and simple.  Just know that by the time you see “.handle” we are within the callback.</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))</div><div class=\"line\">        .handle((userVideos, ex) -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (userVideos != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (UserVideos userVideo : userVideos) &#123;</div><div class=\"line\">                        <span class=\"string\">\"do something with userVideo here\"</span></div><div class=\"line\">                    &#125;</div></pre></td></tr></table></figure></p>\n<p>It seems so simple.  I returned my results and now I want to iterate over those results and do something with them, but these aren’t synchronous calls that block until complete.  I need to handle them properly from an asynchronous standpoint and only grab those results that have actually been returned.  The rest I will need to fetch with more asynchronous calls.</p>\n<p>Again, this is demonstrated very clearly <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging\" target=\"_blank\" rel=\"external\">here</a> in the Async paging section.</p>\n<p>This…is a snippet pulled from the working code using the example given from the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging\" target=\"_blank\" rel=\"external\">async</a> page I keep referencing.  Now, I see how many items I have remaining without fetching, loop through the remaining items, and break out once I have exhausted the list.  You may not see in my example below, but once I “break;” I exit out and grab futures for any more items that may be left, rinse and repeat.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))</div><div class=\"line\">        .handle((userVideos, ex) -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (userVideos != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> remaining = userVideos.getAvailableWithoutFetching();</div><div class=\"line\">                    <span class=\"keyword\">for</span> (UserVideos userVideo : userVideos) &#123;</div><div class=\"line\">                        <span class=\"string\">\"do something with userVideo here\"</span></div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (--remaining == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div></pre></td></tr></table></figure></p>\n<p>The whole point of this post was to point out a potential “gotcha” with a very simple fix when dealing with asynchronous programming and the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/\" target=\"_blank\" rel=\"external\">DSE driver for Java</a>.  This one tripped me up for a moment until I realized my mistake.  Now that I know better my “futures” are looking bright in deed….see my joke there….ha….haha…..ha…<em>awkward pause</em>.  Honestly, this simple change tightend all of my async code up.  No more strange artifacts</p>\n","excerpt":"<p>Or rather I should be saying that to myself.  So, TIL (today I learned) something simple yet profound while working with asynchronous programming and the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/\">DSE java driver</a>.  Ensure that you are properly iterating through your results when making an async call.  You cannot simply iterate all of your rows using a for loop or something along the lines.  Ok, well, technically you can, but if you have more rows than your fetch size the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/\">DSE java driver</a> will throw a big fat error your way letting you know you are blocking within an async call.  I should point that I am still somewhat new to working with asynchronous calls (yes, someone finally pulled up the rock I was under) so for you veterans this may be knowledge already gained from async NOOB 101.  By the way, here is the error the driver threw at me (thank you for doing so DSE driver peeps).</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Detected a synchronous call on an I/O thread, <span class=\"keyword\">this</span> can cause deadlocks or unpredictable behavior. <span class=\"function\">This generally happens when a Future callback calls a synchronous Session <span class=\"title\">method</span> <span class=\"params\">(execute()</span> or <span class=\"title\">prepare</span><span class=\"params\">()</span>), or iterates a result set past the fetch <span class=\"title\">size</span> <span class=\"params\">(causing an internal synchronous fetch of the next page of results)</span>. Avoid <span class=\"keyword\">this</span> in your callbacks, or schedule them on a different executor.</div><div class=\"line\">\tcom.datastax.driver.core.AbstractSession.<span class=\"title\">checkNotInEventLoop</span><span class=\"params\">(AbstractSession.java:<span class=\"number\">206</span>)</span></div><div class=\"line\">\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.<span class=\"title\">prepareNextRow</span><span class=\"params\">(ArrayBackedResultSet.java:<span class=\"number\">310</span>)</span></div><div class=\"line\">\tcom.datastax.driver.core.ArrayBackedResultSet$MultiPage.<span class=\"title\">isExhausted</span><span class=\"params\">(ArrayBackedResultSet.java:<span class=\"number\">269</span>)</span></div><div class=\"line\">\tcom.datastax.driver.core.ArrayBackedResultSet$1.<span class=\"title\">hasNext</span><span class=\"params\">(ArrayBackedResultSet.java:<span class=\"number\">143</span>)</span></div><div class=\"line\">\tcom.datastax.driver.mapping.Result$1.<span class=\"title\">hasNext</span><span class=\"params\">(Result.java:<span class=\"number\">102.</span>..</span></span></div></pre></td></tr></table></figure>\n<p>The reason is stated <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging\">here</a>.  I’ll quote it just to be clear “If you consume a ResultSet in a callback, be aware that iterating the rows will trigger synchronous queries as you page through the results. To avoid this, use getAvailableWithoutFetching to limit the iteration to the current page, and fetchMoreResults to get a future to the next page”.  Even though I read this before I started into this code I must have glossed over this concept the first time through as my implementation was acting very strange indeed.</p>\n<p>Let’s look at a simple example.  At this point in my code I already made an aynchronous call with session.executeAsync(), created a future, and returned my results into a callback.  The following examples are within my callback.<br>In the case below I mapped my results to the UserVideos entity and now I am iterating through those results to do something with each “userVideo” object.<br>This…DOES NOT work and will throw the error I mentioned above.</p>\n<p><em>Ehem, I have a utility class handle callbacks if you were wondering where that was.  I wanted to keep the example nice and simple.  Just know that by the time you see “.handle” we are within the callback.</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))</div><div class=\"line\">        .handle((userVideos, ex) -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (userVideos != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (UserVideos userVideo : userVideos) &#123;</div><div class=\"line\">                        <span class=\"string\">\"do something with userVideo here\"</span></div><div class=\"line\">                    &#125;</div></pre></td></tr></table></figure></p>\n<p>It seems so simple.  I returned my results and now I want to iterate over those results and do something with them, but these aren’t synchronous calls that block until complete.  I need to handle them properly from an asynchronous standpoint and only grab those results that have actually been returned.  The rest I will need to fetch with more asynchronous calls.</p>\n<p>Again, this is demonstrated very clearly <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging\">here</a> in the Async paging section.</p>\n<p>This…is a snippet pulled from the working code using the example given from the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/manual/async/#async-paging\">async</a> page I keep referencing.  Now, I see how many items I have remaining without fetching, loop through the remaining items, and break out once I have exhausted the list.  You may not see in my example below, but once I “break;” I exit out and grab futures for any more items that may be left, rinse and repeat.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">FutureUtils.buildCompletableFuture(userVideosMapper.mapAsync(future))</div><div class=\"line\">        .handle((userVideos, ex) -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (userVideos != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> remaining = userVideos.getAvailableWithoutFetching();</div><div class=\"line\">                    <span class=\"keyword\">for</span> (UserVideos userVideo : userVideos) &#123;</div><div class=\"line\">                        <span class=\"string\">\"do something with userVideo here\"</span></div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (--remaining == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div></pre></td></tr></table></figure></p>\n<p>The whole point of this post was to point out a potential “gotcha” with a very simple fix when dealing with asynchronous programming and the <a href=\"http://docs.datastax.com/en/developer/java-driver/3.2/\">DSE driver for Java</a>.  This one tripped me up for a moment until I realized my mistake.  Now that I know better my “futures” are looking bright in deed….see my joke there….ha….haha…..ha…<em>awkward pause</em>.  Honestly, this simple change tightend all of my async code up.  No more strange artifacts</p>"},{"title":"Dropping in on my cluster","date":"2017-02-13T16:27:17.000Z","_content":"{% asset_img datastax_drop.gif \"Dropping in on my cluster\" %}\nLooks like my nodes are healthy.  :)","source":"_posts/Dropping-in-on-my-cluster.md","raw":"---\ntitle: Dropping in on my cluster\ndate: 2017-02-13 11:27:17\ntags:\n    - datastax\n    - opscenter\n    - aerial\n    - drop\ncategories: Aerial\n---\n{% asset_img datastax_drop.gif \"Dropping in on my cluster\" %}\nLooks like my nodes are healthy.  :)","slug":"Dropping-in-on-my-cluster","published":1,"updated":"2017-02-13T16:35:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7se4zw0002fpkm7rscif5s","content":"<img src=\"/2017/02/13/Dropping-in-on-my-cluster/datastax_drop.gif\" alt=\"Dropping in on my cluster\" title=\"Dropping in on my cluster\">\n<p>Looks like my nodes are healthy.  :)</p>\n","excerpt":"","more":"<img src=\"/2017/02/13/Dropping-in-on-my-cluster/datastax_drop.gif\" alt=\"Dropping in on my cluster\" title=\"Dropping in on my cluster\">\n<p>Looks like my nodes are healthy.  :)</p>\n"},{"title":"I'm Sure You Weren't Looking","date":"2017-02-07T18:51:11.000Z","_content":"Hi there and welcome to my blog.  As the title suggests I am pretty sure you had no idea this blog or page even existed.  This is most likely due to the fact that I had not published anything until....just now.  \n\n\nWow, you are like....\n\n\n**THE FIRST PERSON HERE OMG!**\n<iframe src=\"//giphy.com/embed/l3q2SubtPHg5E3utW?html5=true\" width=\"480\" height=\"266\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n\nSeriously though, thanks for taking a look and make sure to come back and check out my other posts as I muse on things ranging from mishaps while up on silks to technical discussions on distributed database clusters.\n\nIn my next post, I'm going to bring you through my experience setting up a Raspberry PI mixed-worlkload cluster using Cassandra.\n\nSee ya :)","source":"_posts/I-m-Sure-You-Weren-t-Looking.md","raw":"---\ntitle: I'm Sure You Weren't Looking\ndate: 2017-02-07 13:51:11\ncategories:\n    - Something Else\ntags:\n    - hi there\n    - welcome\n    - fun times\n    - OMG\n---\nHi there and welcome to my blog.  As the title suggests I am pretty sure you had no idea this blog or page even existed.  This is most likely due to the fact that I had not published anything until....just now.  \n\n\nWow, you are like....\n\n\n**THE FIRST PERSON HERE OMG!**\n<iframe src=\"//giphy.com/embed/l3q2SubtPHg5E3utW?html5=true\" width=\"480\" height=\"266\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n\nSeriously though, thanks for taking a look and make sure to come back and check out my other posts as I muse on things ranging from mishaps while up on silks to technical discussions on distributed database clusters.\n\nIn my next post, I'm going to bring you through my experience setting up a Raspberry PI mixed-worlkload cluster using Cassandra.\n\nSee ya :)","slug":"I-m-Sure-You-Weren-t-Looking","published":1,"updated":"2017-02-07T21:56:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7se5010005fpkmohojebht","content":"<p>Hi there and welcome to my blog.  As the title suggests I am pretty sure you had no idea this blog or page even existed.  This is most likely due to the fact that I had not published anything until….just now.  </p>\n<p>Wow, you are like….</p>\n<p><strong>THE FIRST PERSON HERE OMG!</strong></p>\n<iframe src=\"//giphy.com/embed/l3q2SubtPHg5E3utW?html5=true\" width=\"480\" height=\"266\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen></iframe>\n\n<p>Seriously though, thanks for taking a look and make sure to come back and check out my other posts as I muse on things ranging from mishaps while up on silks to technical discussions on distributed database clusters.</p>\n<p>In my next post, I’m going to bring you through my experience setting up a Raspberry PI mixed-worlkload cluster using Cassandra.</p>\n<p>See ya :)</p>\n","excerpt":"","more":"<p>Hi there and welcome to my blog.  As the title suggests I am pretty sure you had no idea this blog or page even existed.  This is most likely due to the fact that I had not published anything until….just now.  </p>\n<p>Wow, you are like….</p>\n<p><strong>THE FIRST PERSON HERE OMG!</strong></p>\n<iframe src=\"//giphy.com/embed/l3q2SubtPHg5E3utW?html5=true\" width=\"480\" height=\"266\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n\n<p>Seriously though, thanks for taking a look and make sure to come back and check out my other posts as I muse on things ranging from mishaps while up on silks to technical discussions on distributed database clusters.</p>\n<p>In my next post, I’m going to bring you through my experience setting up a Raspberry PI mixed-worlkload cluster using Cassandra.</p>\n<p>See ya :)</p>\n"},{"title":"Mixed Workload DSE Cluster with Raspberry PI's","date":"2017-02-07T18:52:11.000Z","_content":"Alrighty, as I mentioned in my previous [post](/2017/02/07/I-m-Sure-You-Weren-t-Looking) I have a mixed-workload cluster (Cassandra, DSE search, DSE graph) using a combination of 4 Raspberry PI's and my laptop.  I had multiple things in mind when I started into this.\n\n1. Low cost for learning\n\n1. Something I can break and not cry about\n\n1. How low can one really go when setting up a cluster?\n\n1. Get some DSE OpsCenter knowledge\n\n1. These are Raspberry PI's, they are just damn cool, so why not setup a cluster?!\n\n<!-- more -->\n\n## PIE?  Raspberries? 3.14? PI?\n{% raw %}\n<div class=\"responsive-container\" style=\"height:160px\">\n    <div class=\"dummy\"></div>\n    <div class=\"img-container\">\n        <div class=\"centerer\"></div>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/pie-pi.jpg\" title=\"pie\" width=\"25%\" height=\"auto\">\n          <span><strong>+</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberry.jpg\" title=\"raspberries\" width=\"25%\" height=\"auto\">\n          <span><strong>=</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberrypi.jpg\" title=\"raspberrypi\" width=\"25%\" height=\"auto\">\n    </div>\n</div>\n{% endraw %}\n\nIf you are not already familiar with RaspberryPI's [go take a look][raspberrypi].  These are cool little machines for very little cost.\n\n[Here are the specs for the model 3][model3], but just to summarize each node in our cluster only has 1GB of RAM and a 1.2GHz quad-core processor.  This is clearly not a setup to use in your production environment.  This is, however, a great way to learn and experiment.\n\n\n## The setup\n4 [RaspberryPI's][raspberrypi] (wired ethernet)\nNOTE:  These are designed to be \"built up\" so you will need to purchase microSD cards and the outer shells separately\n\nOne `2.6GHz 8 core` MacBook with `16GB RAM` (wired ethernet)\n\n[DataStax Enterprise Opscenter 6.0.7][opscenter] using [tarball installation][opscentertarball]\n\n[DataStax Agent 6.0.7][agent] using [tarball installation][agenttarball]\n\n[DataStax Enterprise 5.0.5][dse], again, using the [tarball installation][dsetarball]\n\n[RAVPower 6 port USB charger][rav] with a set of USB `Male A` to `Micro B` cables.  I also purchased a `4x1 HDMI` switch, but you can easily run these headless if you know your way around a Linux shell.\n\nJust a quick note about the tarball installations.  DSE generally supports using installers across most major platforms and for each of the various installs, but since we are using RaspberryPI's in this case and since I used the [NOOBS][noobs] install to get up and going as fast as I could it just so happens that combination **only works with tarball installs**.  Please, learn from me and don't spend the many, many hours I did eventually figuring this out.   \n\nYou can, in fact, install other operating systems on RaspberryPI's which may allow the installers to work, but you'll have to come back and tell me about it if you give it a go.\n\nAaaaaaand for the reveal dun dunn dunnnnnnnnn! (Yes, those are shiny, lighted cables)\n{% asset_img myPIs.gif \"My Raspberry PI Cluster\" %}\n\n## I may have cheated just a little bit\nSo, I mentioned above \"mixed workload cluster with Raspberry PI's\".  This is 100% true, but also notice there is a laptop in the mix.  I ended up using the laptop to house OpsCenter and my search/graph datacenter and I'm using the PI's for my core Cassandra cluster.  In my experience I don't usually install operations tools and the like directly on production devices facing the public because they have a tendency to cause unpredicatable load.  The limited RAM on the PI's (1GB) is also a factor which I will address here in a moment.  As far as the search/graph datacenter portion I simply used the laptop out of convienence because I already had a 4-node core Cassandra cluster running on the PI's at the time and I wanted to observe the interaction between my search/graph and Cassandra datacenters in a \"pure\" fashion.\n\n## Get this working on PI's\nRaspberry PI's are special snowflakes when it comes to making this all work.  I will detail all this below, but here, for you, is the summarized list of what is needed.\n\n1. [Disable swap][swap]\n`sudo swapoff -a` is your friend.  It is also the quick and dirty way, not permanent on reboot.  Take a look at the \"Disable swapping\" section of [this post][disableswap] if you would like a more permanent solution.\n\n1. Go Headless\nThis is quite easy to do using `sudo raspi-config` while ssh'd into your PI and it will help free up enough memory to make things stable.  Just make sure you already know your PI's IP address or know how to find it if things go sour.\n\n1. Decrease RAM allocated to datastax-agent from `128MB to 64MB` \nEdit `datastax-agent-env.sh` located in [your datastax-agent install dir]/conf/datastax-agent-env.sh\n```bash\nFrom:\nJVM_OPTS=\"$JVM_OPTS -Xmx128M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"\n\nTo:\nJVM_OPTS=\"$JVM_OPTS -Xmx64M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"\n```\n\n1. Explicitly set Java HEAP settings for Cassandra node\nEdit `cassandra-env.sh` located in [your DSE install dir]/resources/cassandra/conf/cassandra-env.sh.  Search for \"HEAP\" to find and edit the lines.  Notice mine are already set to the working values.  These are commented out by default which will allow the script to calculate values for you, but for our PI case we cannot use the calculated values.\n```bash\nMAX_HEAP_SIZE=\"200M\"\nHEAP_NEWSIZE=\"50M\"\n```\n\n1. [Store collection data on a separate cluster][storecollection]\nRemember that part about \"cheating\" with my [OpsCenter][opscenter] laptop?  Yup, this is part of it.  I'll give more details down below.\n\n## Let's talk about OpsCenter, agents, memory, disk speed, and mucho frustrationo \nThat's kind of a long list now that I see it all typed out, but there's a lot to consider.\n\nWe have nodes with `1GB of RAM`, a `32 bit` os, `4 cores`, and a `32GB microSD` drive acting as a hard disk.  This is way below the recommended values of `16-32GB of RAM`, `500GB-1TB` of fast disk, and `64bit` with `8 cores` for running Cassandra nodes, or really any database for that matter.  I wasn't really sure how well this would work, if at all, given memory contraints alone not to mention the speed of microSD's for a database that is known to need very fast disk.\n\n### OpsCenter\nI decided right off the bat I wanted OpsCenter in the mix.  Part of this whole project was to learn and what better way than to go whole hog and see what it could do.  If you use OpsCenter you must install [DataStax agents][agent] on each of your nodes in order for magic to happen.  That magic comes at a memory cost, not a huge one, but one that matters when only dealing with `1GB of RAM`.  In order to leave enough room for the Cassandra node itself to run I effectively cut this requirement in half.  So far, after months of running, I have not seen an issue running agents at `64MB of RAM`.\n{% asset_img opscenter_cluster.png \"Laptop + PI Mixed-Workload Cluster\" %}\n\n### Cassandra memory\nThe default auto caluclated memory configuration for DSE managed Cassandra nodes works well enough even on the PI's, but there's a catch.  Remember those agents we need for [OpsCenter][opscenter]?  Well, turns out the agents need just enough extra memory to push things over the edge and on a system with no swap file this means **page fault** which is exactly what happened.  I tried to quash every little process I could to free up enough RAM for my nodes to remain stable and I even made them headless, but to remain stable I had to explicitly configure the HEAP settings for my Cassandra nodes.  The end result is listed up above.\n\n### Headless\nSo, before I went headless things were working...uhh...well enough.  Not well enough that I could leave it alone really and any time the system was put under stress **!BAM!** I would lose a node.  This ended up being **the clincher**.  I noticed the Raspbian UI itself was eating up just enough RAM to prevent my nodes from allocating more in times of need.  I chopped off their heads and since then along with the other changes I made my nodes have been rock solid on the memory front.\n\n### Memory is good how about disk?\nWe already talked about the swap file.  Not only is it [strongly recommended][swap] to disable swap on nodes running Cassandra, but even more so on PI's running on microSD's.  Before I did so it was clear my nodes were struggling as even small tasks kept driving load up and upon some inspection it was obvious I/O was mostly to blame.  However, something else was lurking even after I disabled swap.  At times I would see my nodes shoot up from a load of `<1 upwards to 10+`.  At this point they would usually become unresponsive and either crash or eventually come back to reality, but always, always under heavy load.\n\n### Colllleccccctionnnnnn Daaaaatttttaaaaa\nSorry, couldn't help myself.  As stated above move collection data storage off the PI's onto a [separate cluster][storecollection].  They simply cannot handle all of the I/O associated with collecting, storing, and repairing the collection data from the rollup\\* tables.  Compaction was happening way too fast for the nodes to keep up most likely a result of having very little memory to work with, the PI's could not keep up with the amount of collection data itself, and read repair on the rollup\\* tables was a constant, never ending stream of repair.  Once I made the switch my PI nodes all quieted down to a normal `load around 1`, things have stabilized, and   I no longer have gaps in my analytics data (except for when I **HULK SMASH** nodes myself for fun).\n\n## Finally, the mixed workload part\nYup, right there in the title and all and I haven't really mentioned it.  Part of the reason I went and did all of this aside from learning and seeing what could be done was to extend [Luke Tillman's **\\*cough\\*....shame...less..plug \\*cooouugh\\***][luke] freaking awesome [KillrVideo][killrvideo] reference app to hook up to clusters outside of its [Dockerized][docker] container.  This forced me to extend my existing Cassandra cluster into a mixed workload scenario with [DSE Search][dsesearch].  Right, I could have simply put search within the same cluster, but I was looking to emulate what I would do in a production scenario.  I have an upcoming post on this very topic coming here in the future.  I also had need to extend into [DSE graph][dsegraph] as well for some of my own projects so I took the opportunity to go ahead and just do it all.  The end result is a fully functional Cassandra/Search/Graph DSE managed mixed workload cluster being served up mostly on Raspberry PI's with a little help from a laptop all hooked up to [KillrVideo][killrvideo].\n\nOne last thing before I go.  I find that tailing the agent.log, opscenterd.log, and system.log files from all of the nodes is quite insightful especially when watching the interaction between the nodes when performing regular CQL, search, and graph queries.  I'm also the type of person who can watch a defrag for hours and find every little box color change useful information.  \n\nNot sure what that says about me.  \n\n\n[raspberrypi]: https://www.raspberrypi.org/ \n[model3]: https://www.raspberrypi.org/products/raspberry-pi-3-model-b/ \n[opscenter]: http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\n[opscentertarball]: https://docs.datastax.com/en/latest-opscenter/opsc/install/opscInstallTar_t.html\n[agent]: http://docs.datastax.com/en/latest-opscenter/opsc/install/installDSagents.html\n[agenttarball]: http://docs.datastax.com/en/latest-opscenter/opsc/install/opsc-agentInstallManual_t.html\n[dse]: http://docs.datastax.com/en/latest-dse/\n[dsetarball]: http://docs.datastax.com/en/latest-dse/datastax_enterprise/install/installTARdse.html\n[dsesearch]: http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/srch/searchOverview.html\n[dsegraph]: http://www.datastax.com/products/datastax-enterprise-graph\n[noobs]: https://www.raspberrypi.org/downloads/noobs/\n[rav]: https://www.ravpower.com/6-port-usb-wall-charger-black-.html\n[recommendedsettings]: https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html\n[swap]: https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html#recommendedSettingsLinux__disable-swap\n[disableswap]: http://ideaheap.com/2013/07/stopping-sd-card-corruption-on-a-raspberry-pi/\n[storecollection]: https://docs.datastax.com/en/opscenter/6.0/opsc/configure/opscStoringCollectionDataDifferentCluster_t.html\n[killrvideo]: https://killrvideo.github.io/\n[luke]: http://www.luketillman.com/\n[docker]: https://www.docker.com/","source":"_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s.md","raw":"---\ntitle: Mixed Workload DSE Cluster with Raspberry PI's\ndate: 2017-02-07 13:52:11\ncategories:\n    - Technical\ntags:\n    - raspberry PI\n    - cluster\n    - killrvideo\n---\nAlrighty, as I mentioned in my previous [post](/2017/02/07/I-m-Sure-You-Weren-t-Looking) I have a mixed-workload cluster (Cassandra, DSE search, DSE graph) using a combination of 4 Raspberry PI's and my laptop.  I had multiple things in mind when I started into this.\n\n1. Low cost for learning\n\n1. Something I can break and not cry about\n\n1. How low can one really go when setting up a cluster?\n\n1. Get some DSE OpsCenter knowledge\n\n1. These are Raspberry PI's, they are just damn cool, so why not setup a cluster?!\n\n<!-- more -->\n\n## PIE?  Raspberries? 3.14? PI?\n{% raw %}\n<div class=\"responsive-container\" style=\"height:160px\">\n    <div class=\"dummy\"></div>\n    <div class=\"img-container\">\n        <div class=\"centerer\"></div>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/pie-pi.jpg\" title=\"pie\" width=\"25%\" height=\"auto\">\n          <span><strong>+</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberry.jpg\" title=\"raspberries\" width=\"25%\" height=\"auto\">\n          <span><strong>=</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberrypi.jpg\" title=\"raspberrypi\" width=\"25%\" height=\"auto\">\n    </div>\n</div>\n{% endraw %}\n\nIf you are not already familiar with RaspberryPI's [go take a look][raspberrypi].  These are cool little machines for very little cost.\n\n[Here are the specs for the model 3][model3], but just to summarize each node in our cluster only has 1GB of RAM and a 1.2GHz quad-core processor.  This is clearly not a setup to use in your production environment.  This is, however, a great way to learn and experiment.\n\n\n## The setup\n4 [RaspberryPI's][raspberrypi] (wired ethernet)\nNOTE:  These are designed to be \"built up\" so you will need to purchase microSD cards and the outer shells separately\n\nOne `2.6GHz 8 core` MacBook with `16GB RAM` (wired ethernet)\n\n[DataStax Enterprise Opscenter 6.0.7][opscenter] using [tarball installation][opscentertarball]\n\n[DataStax Agent 6.0.7][agent] using [tarball installation][agenttarball]\n\n[DataStax Enterprise 5.0.5][dse], again, using the [tarball installation][dsetarball]\n\n[RAVPower 6 port USB charger][rav] with a set of USB `Male A` to `Micro B` cables.  I also purchased a `4x1 HDMI` switch, but you can easily run these headless if you know your way around a Linux shell.\n\nJust a quick note about the tarball installations.  DSE generally supports using installers across most major platforms and for each of the various installs, but since we are using RaspberryPI's in this case and since I used the [NOOBS][noobs] install to get up and going as fast as I could it just so happens that combination **only works with tarball installs**.  Please, learn from me and don't spend the many, many hours I did eventually figuring this out.   \n\nYou can, in fact, install other operating systems on RaspberryPI's which may allow the installers to work, but you'll have to come back and tell me about it if you give it a go.\n\nAaaaaaand for the reveal dun dunn dunnnnnnnnn! (Yes, those are shiny, lighted cables)\n{% asset_img myPIs.gif \"My Raspberry PI Cluster\" %}\n\n## I may have cheated just a little bit\nSo, I mentioned above \"mixed workload cluster with Raspberry PI's\".  This is 100% true, but also notice there is a laptop in the mix.  I ended up using the laptop to house OpsCenter and my search/graph datacenter and I'm using the PI's for my core Cassandra cluster.  In my experience I don't usually install operations tools and the like directly on production devices facing the public because they have a tendency to cause unpredicatable load.  The limited RAM on the PI's (1GB) is also a factor which I will address here in a moment.  As far as the search/graph datacenter portion I simply used the laptop out of convienence because I already had a 4-node core Cassandra cluster running on the PI's at the time and I wanted to observe the interaction between my search/graph and Cassandra datacenters in a \"pure\" fashion.\n\n## Get this working on PI's\nRaspberry PI's are special snowflakes when it comes to making this all work.  I will detail all this below, but here, for you, is the summarized list of what is needed.\n\n1. [Disable swap][swap]\n`sudo swapoff -a` is your friend.  It is also the quick and dirty way, not permanent on reboot.  Take a look at the \"Disable swapping\" section of [this post][disableswap] if you would like a more permanent solution.\n\n1. Go Headless\nThis is quite easy to do using `sudo raspi-config` while ssh'd into your PI and it will help free up enough memory to make things stable.  Just make sure you already know your PI's IP address or know how to find it if things go sour.\n\n1. Decrease RAM allocated to datastax-agent from `128MB to 64MB` \nEdit `datastax-agent-env.sh` located in [your datastax-agent install dir]/conf/datastax-agent-env.sh\n```bash\nFrom:\nJVM_OPTS=\"$JVM_OPTS -Xmx128M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"\n\nTo:\nJVM_OPTS=\"$JVM_OPTS -Xmx64M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"\n```\n\n1. Explicitly set Java HEAP settings for Cassandra node\nEdit `cassandra-env.sh` located in [your DSE install dir]/resources/cassandra/conf/cassandra-env.sh.  Search for \"HEAP\" to find and edit the lines.  Notice mine are already set to the working values.  These are commented out by default which will allow the script to calculate values for you, but for our PI case we cannot use the calculated values.\n```bash\nMAX_HEAP_SIZE=\"200M\"\nHEAP_NEWSIZE=\"50M\"\n```\n\n1. [Store collection data on a separate cluster][storecollection]\nRemember that part about \"cheating\" with my [OpsCenter][opscenter] laptop?  Yup, this is part of it.  I'll give more details down below.\n\n## Let's talk about OpsCenter, agents, memory, disk speed, and mucho frustrationo \nThat's kind of a long list now that I see it all typed out, but there's a lot to consider.\n\nWe have nodes with `1GB of RAM`, a `32 bit` os, `4 cores`, and a `32GB microSD` drive acting as a hard disk.  This is way below the recommended values of `16-32GB of RAM`, `500GB-1TB` of fast disk, and `64bit` with `8 cores` for running Cassandra nodes, or really any database for that matter.  I wasn't really sure how well this would work, if at all, given memory contraints alone not to mention the speed of microSD's for a database that is known to need very fast disk.\n\n### OpsCenter\nI decided right off the bat I wanted OpsCenter in the mix.  Part of this whole project was to learn and what better way than to go whole hog and see what it could do.  If you use OpsCenter you must install [DataStax agents][agent] on each of your nodes in order for magic to happen.  That magic comes at a memory cost, not a huge one, but one that matters when only dealing with `1GB of RAM`.  In order to leave enough room for the Cassandra node itself to run I effectively cut this requirement in half.  So far, after months of running, I have not seen an issue running agents at `64MB of RAM`.\n{% asset_img opscenter_cluster.png \"Laptop + PI Mixed-Workload Cluster\" %}\n\n### Cassandra memory\nThe default auto caluclated memory configuration for DSE managed Cassandra nodes works well enough even on the PI's, but there's a catch.  Remember those agents we need for [OpsCenter][opscenter]?  Well, turns out the agents need just enough extra memory to push things over the edge and on a system with no swap file this means **page fault** which is exactly what happened.  I tried to quash every little process I could to free up enough RAM for my nodes to remain stable and I even made them headless, but to remain stable I had to explicitly configure the HEAP settings for my Cassandra nodes.  The end result is listed up above.\n\n### Headless\nSo, before I went headless things were working...uhh...well enough.  Not well enough that I could leave it alone really and any time the system was put under stress **!BAM!** I would lose a node.  This ended up being **the clincher**.  I noticed the Raspbian UI itself was eating up just enough RAM to prevent my nodes from allocating more in times of need.  I chopped off their heads and since then along with the other changes I made my nodes have been rock solid on the memory front.\n\n### Memory is good how about disk?\nWe already talked about the swap file.  Not only is it [strongly recommended][swap] to disable swap on nodes running Cassandra, but even more so on PI's running on microSD's.  Before I did so it was clear my nodes were struggling as even small tasks kept driving load up and upon some inspection it was obvious I/O was mostly to blame.  However, something else was lurking even after I disabled swap.  At times I would see my nodes shoot up from a load of `<1 upwards to 10+`.  At this point they would usually become unresponsive and either crash or eventually come back to reality, but always, always under heavy load.\n\n### Colllleccccctionnnnnn Daaaaatttttaaaaa\nSorry, couldn't help myself.  As stated above move collection data storage off the PI's onto a [separate cluster][storecollection].  They simply cannot handle all of the I/O associated with collecting, storing, and repairing the collection data from the rollup\\* tables.  Compaction was happening way too fast for the nodes to keep up most likely a result of having very little memory to work with, the PI's could not keep up with the amount of collection data itself, and read repair on the rollup\\* tables was a constant, never ending stream of repair.  Once I made the switch my PI nodes all quieted down to a normal `load around 1`, things have stabilized, and   I no longer have gaps in my analytics data (except for when I **HULK SMASH** nodes myself for fun).\n\n## Finally, the mixed workload part\nYup, right there in the title and all and I haven't really mentioned it.  Part of the reason I went and did all of this aside from learning and seeing what could be done was to extend [Luke Tillman's **\\*cough\\*....shame...less..plug \\*cooouugh\\***][luke] freaking awesome [KillrVideo][killrvideo] reference app to hook up to clusters outside of its [Dockerized][docker] container.  This forced me to extend my existing Cassandra cluster into a mixed workload scenario with [DSE Search][dsesearch].  Right, I could have simply put search within the same cluster, but I was looking to emulate what I would do in a production scenario.  I have an upcoming post on this very topic coming here in the future.  I also had need to extend into [DSE graph][dsegraph] as well for some of my own projects so I took the opportunity to go ahead and just do it all.  The end result is a fully functional Cassandra/Search/Graph DSE managed mixed workload cluster being served up mostly on Raspberry PI's with a little help from a laptop all hooked up to [KillrVideo][killrvideo].\n\nOne last thing before I go.  I find that tailing the agent.log, opscenterd.log, and system.log files from all of the nodes is quite insightful especially when watching the interaction between the nodes when performing regular CQL, search, and graph queries.  I'm also the type of person who can watch a defrag for hours and find every little box color change useful information.  \n\nNot sure what that says about me.  \n\n\n[raspberrypi]: https://www.raspberrypi.org/ \n[model3]: https://www.raspberrypi.org/products/raspberry-pi-3-model-b/ \n[opscenter]: http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\n[opscentertarball]: https://docs.datastax.com/en/latest-opscenter/opsc/install/opscInstallTar_t.html\n[agent]: http://docs.datastax.com/en/latest-opscenter/opsc/install/installDSagents.html\n[agenttarball]: http://docs.datastax.com/en/latest-opscenter/opsc/install/opsc-agentInstallManual_t.html\n[dse]: http://docs.datastax.com/en/latest-dse/\n[dsetarball]: http://docs.datastax.com/en/latest-dse/datastax_enterprise/install/installTARdse.html\n[dsesearch]: http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/srch/searchOverview.html\n[dsegraph]: http://www.datastax.com/products/datastax-enterprise-graph\n[noobs]: https://www.raspberrypi.org/downloads/noobs/\n[rav]: https://www.ravpower.com/6-port-usb-wall-charger-black-.html\n[recommendedsettings]: https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html\n[swap]: https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html#recommendedSettingsLinux__disable-swap\n[disableswap]: http://ideaheap.com/2013/07/stopping-sd-card-corruption-on-a-raspberry-pi/\n[storecollection]: https://docs.datastax.com/en/opscenter/6.0/opsc/configure/opscStoringCollectionDataDifferentCluster_t.html\n[killrvideo]: https://killrvideo.github.io/\n[luke]: http://www.luketillman.com/\n[docker]: https://www.docker.com/","slug":"Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s","published":1,"updated":"2017-02-10T21:04:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7se5030006fpkmc94od45a","content":"<p>Alrighty, as I mentioned in my previous <a href=\"/2017/02/07/I-m-Sure-You-Weren-t-Looking\">post</a> I have a mixed-workload cluster (Cassandra, DSE search, DSE graph) using a combination of 4 Raspberry PI’s and my laptop.  I had multiple things in mind when I started into this.</p>\n<ol>\n<li><p>Low cost for learning</p>\n</li>\n<li><p>Something I can break and not cry about</p>\n</li>\n<li><p>How low can one really go when setting up a cluster?</p>\n</li>\n<li><p>Get some DSE OpsCenter knowledge</p>\n</li>\n<li><p>These are Raspberry PI’s, they are just damn cool, so why not setup a cluster?!</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"PIE-Raspberries-3-14-PI\"><a href=\"#PIE-Raspberries-3-14-PI\" class=\"headerlink\" title=\"PIE?  Raspberries? 3.14? PI?\"></a>PIE?  Raspberries? 3.14? PI?</h2>\n<div class=\"responsive-container\" style=\"height:160px\">\n    <div class=\"dummy\"></div>\n    <div class=\"img-container\">\n        <div class=\"centerer\"></div>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/pie-pi.jpg\" title=\"pie\" width=\"25%\" height=\"auto\">\n          <span><strong>+</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberry.jpg\" title=\"raspberries\" width=\"25%\" height=\"auto\">\n          <span><strong>=</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberrypi.jpg\" title=\"raspberrypi\" width=\"25%\" height=\"auto\">\n    </div>\n</div>\n\n<p>If you are not already familiar with RaspberryPI’s <a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">go take a look</a>.  These are cool little machines for very little cost.</p>\n<p><a href=\"https://www.raspberrypi.org/products/raspberry-pi-3-model-b/\" target=\"_blank\" rel=\"external\">Here are the specs for the model 3</a>, but just to summarize each node in our cluster only has 1GB of RAM and a 1.2GHz quad-core processor.  This is clearly not a setup to use in your production environment.  This is, however, a great way to learn and experiment.</p>\n<h2 id=\"The-setup\"><a href=\"#The-setup\" class=\"headerlink\" title=\"The setup\"></a>The setup</h2><p>4 <a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">RaspberryPI’s</a> (wired ethernet)<br>NOTE:  These are designed to be “built up” so you will need to purchase microSD cards and the outer shells separately</p>\n<p>One <code>2.6GHz 8 core</code> MacBook with <code>16GB RAM</code> (wired ethernet)</p>\n<p><a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\" target=\"_blank\" rel=\"external\">DataStax Enterprise Opscenter 6.0.7</a> using <a href=\"https://docs.datastax.com/en/latest-opscenter/opsc/install/opscInstallTar_t.html\" target=\"_blank\" rel=\"external\">tarball installation</a></p>\n<p><a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/install/installDSagents.html\" target=\"_blank\" rel=\"external\">DataStax Agent 6.0.7</a> using <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/install/opsc-agentInstallManual_t.html\" target=\"_blank\" rel=\"external\">tarball installation</a></p>\n<p><a href=\"http://docs.datastax.com/en/latest-dse/\" target=\"_blank\" rel=\"external\">DataStax Enterprise 5.0.5</a>, again, using the <a href=\"http://docs.datastax.com/en/latest-dse/datastax_enterprise/install/installTARdse.html\" target=\"_blank\" rel=\"external\">tarball installation</a></p>\n<p><a href=\"https://www.ravpower.com/6-port-usb-wall-charger-black-.html\" target=\"_blank\" rel=\"external\">RAVPower 6 port USB charger</a> with a set of USB <code>Male A</code> to <code>Micro B</code> cables.  I also purchased a <code>4x1 HDMI</code> switch, but you can easily run these headless if you know your way around a Linux shell.</p>\n<p>Just a quick note about the tarball installations.  DSE generally supports using installers across most major platforms and for each of the various installs, but since we are using RaspberryPI’s in this case and since I used the <a href=\"https://www.raspberrypi.org/downloads/noobs/\" target=\"_blank\" rel=\"external\">NOOBS</a> install to get up and going as fast as I could it just so happens that combination <strong>only works with tarball installs</strong>.  Please, learn from me and don’t spend the many, many hours I did eventually figuring this out.   </p>\n<p>You can, in fact, install other operating systems on RaspberryPI’s which may allow the installers to work, but you’ll have to come back and tell me about it if you give it a go.</p>\n<p>Aaaaaaand for the reveal dun dunn dunnnnnnnnn! (Yes, those are shiny, lighted cables)<br><img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/myPIs.gif\" alt=\"My Raspberry PI Cluster\" title=\"My Raspberry PI Cluster\"></p>\n<h2 id=\"I-may-have-cheated-just-a-little-bit\"><a href=\"#I-may-have-cheated-just-a-little-bit\" class=\"headerlink\" title=\"I may have cheated just a little bit\"></a>I may have cheated just a little bit</h2><p>So, I mentioned above “mixed workload cluster with Raspberry PI’s”.  This is 100% true, but also notice there is a laptop in the mix.  I ended up using the laptop to house OpsCenter and my search/graph datacenter and I’m using the PI’s for my core Cassandra cluster.  In my experience I don’t usually install operations tools and the like directly on production devices facing the public because they have a tendency to cause unpredicatable load.  The limited RAM on the PI’s (1GB) is also a factor which I will address here in a moment.  As far as the search/graph datacenter portion I simply used the laptop out of convienence because I already had a 4-node core Cassandra cluster running on the PI’s at the time and I wanted to observe the interaction between my search/graph and Cassandra datacenters in a “pure” fashion.</p>\n<h2 id=\"Get-this-working-on-PI’s\"><a href=\"#Get-this-working-on-PI’s\" class=\"headerlink\" title=\"Get this working on PI’s\"></a>Get this working on PI’s</h2><p>Raspberry PI’s are special snowflakes when it comes to making this all work.  I will detail all this below, but here, for you, is the summarized list of what is needed.</p>\n<ol>\n<li><p><a href=\"https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html#recommendedSettingsLinux__disable-swap\" target=\"_blank\" rel=\"external\">Disable swap</a><br><code>sudo swapoff -a</code> is your friend.  It is also the quick and dirty way, not permanent on reboot.  Take a look at the “Disable swapping” section of <a href=\"http://ideaheap.com/2013/07/stopping-sd-card-corruption-on-a-raspberry-pi/\" target=\"_blank\" rel=\"external\">this post</a> if you would like a more permanent solution.</p>\n</li>\n<li><p>Go Headless<br>This is quite easy to do using <code>sudo raspi-config</code> while ssh’d into your PI and it will help free up enough memory to make things stable.  Just make sure you already know your PI’s IP address or know how to find it if things go sour.</p>\n</li>\n<li><p>Decrease RAM allocated to datastax-agent from <code>128MB to 64MB</code><br>Edit <code>datastax-agent-env.sh</code> located in [your datastax-agent install dir]/conf/datastax-agent-env.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">From:</div><div class=\"line\">JVM_OPTS=<span class=\"string\">\"<span class=\"variable\">$JVM_OPTS</span> -Xmx128M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"</span></div><div class=\"line\"></div><div class=\"line\">To:</div><div class=\"line\">JVM_OPTS=<span class=\"string\">\"<span class=\"variable\">$JVM_OPTS</span> -Xmx64M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Explicitly set Java HEAP settings for Cassandra node<br>Edit <code>cassandra-env.sh</code> located in [your DSE install dir]/resources/cassandra/conf/cassandra-env.sh.  Search for “HEAP” to find and edit the lines.  Notice mine are already set to the working values.  These are commented out by default which will allow the script to calculate values for you, but for our PI case we cannot use the calculated values.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAX_HEAP_SIZE=<span class=\"string\">\"200M\"</span></div><div class=\"line\">HEAP_NEWSIZE=<span class=\"string\">\"50M\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://docs.datastax.com/en/opscenter/6.0/opsc/configure/opscStoringCollectionDataDifferentCluster_t.html\" target=\"_blank\" rel=\"external\">Store collection data on a separate cluster</a><br>Remember that part about “cheating” with my <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\" target=\"_blank\" rel=\"external\">OpsCenter</a> laptop?  Yup, this is part of it.  I’ll give more details down below.</p>\n</li>\n</ol>\n<h2 id=\"Let’s-talk-about-OpsCenter-agents-memory-disk-speed-and-mucho-frustrationo\"><a href=\"#Let’s-talk-about-OpsCenter-agents-memory-disk-speed-and-mucho-frustrationo\" class=\"headerlink\" title=\"Let’s talk about OpsCenter, agents, memory, disk speed, and mucho frustrationo\"></a>Let’s talk about OpsCenter, agents, memory, disk speed, and mucho frustrationo</h2><p>That’s kind of a long list now that I see it all typed out, but there’s a lot to consider.</p>\n<p>We have nodes with <code>1GB of RAM</code>, a <code>32 bit</code> os, <code>4 cores</code>, and a <code>32GB microSD</code> drive acting as a hard disk.  This is way below the recommended values of <code>16-32GB of RAM</code>, <code>500GB-1TB</code> of fast disk, and <code>64bit</code> with <code>8 cores</code> for running Cassandra nodes, or really any database for that matter.  I wasn’t really sure how well this would work, if at all, given memory contraints alone not to mention the speed of microSD’s for a database that is known to need very fast disk.</p>\n<h3 id=\"OpsCenter\"><a href=\"#OpsCenter\" class=\"headerlink\" title=\"OpsCenter\"></a>OpsCenter</h3><p>I decided right off the bat I wanted OpsCenter in the mix.  Part of this whole project was to learn and what better way than to go whole hog and see what it could do.  If you use OpsCenter you must install <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/install/installDSagents.html\" target=\"_blank\" rel=\"external\">DataStax agents</a> on each of your nodes in order for magic to happen.  That magic comes at a memory cost, not a huge one, but one that matters when only dealing with <code>1GB of RAM</code>.  In order to leave enough room for the Cassandra node itself to run I effectively cut this requirement in half.  So far, after months of running, I have not seen an issue running agents at <code>64MB of RAM</code>.<br><img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/opscenter_cluster.png\" alt=\"Laptop + PI Mixed-Workload Cluster\" title=\"Laptop + PI Mixed-Workload Cluster\"></p>\n<h3 id=\"Cassandra-memory\"><a href=\"#Cassandra-memory\" class=\"headerlink\" title=\"Cassandra memory\"></a>Cassandra memory</h3><p>The default auto caluclated memory configuration for DSE managed Cassandra nodes works well enough even on the PI’s, but there’s a catch.  Remember those agents we need for <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\" target=\"_blank\" rel=\"external\">OpsCenter</a>?  Well, turns out the agents need just enough extra memory to push things over the edge and on a system with no swap file this means <strong>page fault</strong> which is exactly what happened.  I tried to quash every little process I could to free up enough RAM for my nodes to remain stable and I even made them headless, but to remain stable I had to explicitly configure the HEAP settings for my Cassandra nodes.  The end result is listed up above.</p>\n<h3 id=\"Headless\"><a href=\"#Headless\" class=\"headerlink\" title=\"Headless\"></a>Headless</h3><p>So, before I went headless things were working…uhh…well enough.  Not well enough that I could leave it alone really and any time the system was put under stress <strong>!BAM!</strong> I would lose a node.  This ended up being <strong>the clincher</strong>.  I noticed the Raspbian UI itself was eating up just enough RAM to prevent my nodes from allocating more in times of need.  I chopped off their heads and since then along with the other changes I made my nodes have been rock solid on the memory front.</p>\n<h3 id=\"Memory-is-good-how-about-disk\"><a href=\"#Memory-is-good-how-about-disk\" class=\"headerlink\" title=\"Memory is good how about disk?\"></a>Memory is good how about disk?</h3><p>We already talked about the swap file.  Not only is it <a href=\"https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html#recommendedSettingsLinux__disable-swap\" target=\"_blank\" rel=\"external\">strongly recommended</a> to disable swap on nodes running Cassandra, but even more so on PI’s running on microSD’s.  Before I did so it was clear my nodes were struggling as even small tasks kept driving load up and upon some inspection it was obvious I/O was mostly to blame.  However, something else was lurking even after I disabled swap.  At times I would see my nodes shoot up from a load of <code>&lt;1 upwards to 10+</code>.  At this point they would usually become unresponsive and either crash or eventually come back to reality, but always, always under heavy load.</p>\n<h3 id=\"Colllleccccctionnnnnn-Daaaaatttttaaaaa\"><a href=\"#Colllleccccctionnnnnn-Daaaaatttttaaaaa\" class=\"headerlink\" title=\"Colllleccccctionnnnnn Daaaaatttttaaaaa\"></a>Colllleccccctionnnnnn Daaaaatttttaaaaa</h3><p>Sorry, couldn’t help myself.  As stated above move collection data storage off the PI’s onto a <a href=\"https://docs.datastax.com/en/opscenter/6.0/opsc/configure/opscStoringCollectionDataDifferentCluster_t.html\" target=\"_blank\" rel=\"external\">separate cluster</a>.  They simply cannot handle all of the I/O associated with collecting, storing, and repairing the collection data from the rollup* tables.  Compaction was happening way too fast for the nodes to keep up most likely a result of having very little memory to work with, the PI’s could not keep up with the amount of collection data itself, and read repair on the rollup* tables was a constant, never ending stream of repair.  Once I made the switch my PI nodes all quieted down to a normal <code>load around 1</code>, things have stabilized, and   I no longer have gaps in my analytics data (except for when I <strong>HULK SMASH</strong> nodes myself for fun).</p>\n<h2 id=\"Finally-the-mixed-workload-part\"><a href=\"#Finally-the-mixed-workload-part\" class=\"headerlink\" title=\"Finally, the mixed workload part\"></a>Finally, the mixed workload part</h2><p>Yup, right there in the title and all and I haven’t really mentioned it.  Part of the reason I went and did all of this aside from learning and seeing what could be done was to extend <a href=\"http://www.luketillman.com/\" target=\"_blank\" rel=\"external\">Luke Tillman’s <strong>*cough*….shame…less..plug *cooouugh*</strong></a> freaking awesome <a href=\"https://killrvideo.github.io/\" target=\"_blank\" rel=\"external\">KillrVideo</a> reference app to hook up to clusters outside of its <a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">Dockerized</a> container.  This forced me to extend my existing Cassandra cluster into a mixed workload scenario with <a href=\"http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/srch/searchOverview.html\" target=\"_blank\" rel=\"external\">DSE Search</a>.  Right, I could have simply put search within the same cluster, but I was looking to emulate what I would do in a production scenario.  I have an upcoming post on this very topic coming here in the future.  I also had need to extend into <a href=\"http://www.datastax.com/products/datastax-enterprise-graph\" target=\"_blank\" rel=\"external\">DSE graph</a> as well for some of my own projects so I took the opportunity to go ahead and just do it all.  The end result is a fully functional Cassandra/Search/Graph DSE managed mixed workload cluster being served up mostly on Raspberry PI’s with a little help from a laptop all hooked up to <a href=\"https://killrvideo.github.io/\" target=\"_blank\" rel=\"external\">KillrVideo</a>.</p>\n<p>One last thing before I go.  I find that tailing the agent.log, opscenterd.log, and system.log files from all of the nodes is quite insightful especially when watching the interaction between the nodes when performing regular CQL, search, and graph queries.  I’m also the type of person who can watch a defrag for hours and find every little box color change useful information.  </p>\n<p>Not sure what that says about me.  </p>\n","excerpt":"<p>Alrighty, as I mentioned in my previous <a href=\"/2017/02/07/I-m-Sure-You-Weren-t-Looking\">post</a> I have a mixed-workload cluster (Cassandra, DSE search, DSE graph) using a combination of 4 Raspberry PI’s and my laptop.  I had multiple things in mind when I started into this.</p>\n<ol>\n<li><p>Low cost for learning</p>\n</li>\n<li><p>Something I can break and not cry about</p>\n</li>\n<li><p>How low can one really go when setting up a cluster?</p>\n</li>\n<li><p>Get some DSE OpsCenter knowledge</p>\n</li>\n<li><p>These are Raspberry PI’s, they are just damn cool, so why not setup a cluster?!</p>\n</li>\n</ol>","more":"<h2 id=\"PIE-Raspberries-3-14-PI\"><a href=\"#PIE-Raspberries-3-14-PI\" class=\"headerlink\" title=\"PIE?  Raspberries? 3.14? PI?\"></a>PIE?  Raspberries? 3.14? PI?</h2>\n<div class=\"responsive-container\" style=\"height:160px\">\n    <div class=\"dummy\"></div>\n    <div class=\"img-container\">\n        <div class=\"centerer\"></div>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/pie-pi.jpg\" title=\"pie\" width=\"25%\" height=\"auto\">\n          <span><strong>+</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberry.jpg\" title=\"raspberries\" width=\"25%\" height=\"auto\">\n          <span><strong>=</strong></span>\n          <img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberrypi.jpg\" title=\"raspberrypi\" width=\"25%\" height=\"auto\">\n    </div>\n</div>\n\n<p>If you are not already familiar with RaspberryPI’s <a href=\"https://www.raspberrypi.org/\">go take a look</a>.  These are cool little machines for very little cost.</p>\n<p><a href=\"https://www.raspberrypi.org/products/raspberry-pi-3-model-b/\">Here are the specs for the model 3</a>, but just to summarize each node in our cluster only has 1GB of RAM and a 1.2GHz quad-core processor.  This is clearly not a setup to use in your production environment.  This is, however, a great way to learn and experiment.</p>\n<h2 id=\"The-setup\"><a href=\"#The-setup\" class=\"headerlink\" title=\"The setup\"></a>The setup</h2><p>4 <a href=\"https://www.raspberrypi.org/\">RaspberryPI’s</a> (wired ethernet)<br>NOTE:  These are designed to be “built up” so you will need to purchase microSD cards and the outer shells separately</p>\n<p>One <code>2.6GHz 8 core</code> MacBook with <code>16GB RAM</code> (wired ethernet)</p>\n<p><a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\">DataStax Enterprise Opscenter 6.0.7</a> using <a href=\"https://docs.datastax.com/en/latest-opscenter/opsc/install/opscInstallTar_t.html\">tarball installation</a></p>\n<p><a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/install/installDSagents.html\">DataStax Agent 6.0.7</a> using <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/install/opsc-agentInstallManual_t.html\">tarball installation</a></p>\n<p><a href=\"http://docs.datastax.com/en/latest-dse/\">DataStax Enterprise 5.0.5</a>, again, using the <a href=\"http://docs.datastax.com/en/latest-dse/datastax_enterprise/install/installTARdse.html\">tarball installation</a></p>\n<p><a href=\"https://www.ravpower.com/6-port-usb-wall-charger-black-.html\">RAVPower 6 port USB charger</a> with a set of USB <code>Male A</code> to <code>Micro B</code> cables.  I also purchased a <code>4x1 HDMI</code> switch, but you can easily run these headless if you know your way around a Linux shell.</p>\n<p>Just a quick note about the tarball installations.  DSE generally supports using installers across most major platforms and for each of the various installs, but since we are using RaspberryPI’s in this case and since I used the <a href=\"https://www.raspberrypi.org/downloads/noobs/\">NOOBS</a> install to get up and going as fast as I could it just so happens that combination <strong>only works with tarball installs</strong>.  Please, learn from me and don’t spend the many, many hours I did eventually figuring this out.   </p>\n<p>You can, in fact, install other operating systems on RaspberryPI’s which may allow the installers to work, but you’ll have to come back and tell me about it if you give it a go.</p>\n<p>Aaaaaaand for the reveal dun dunn dunnnnnnnnn! (Yes, those are shiny, lighted cables)<br><img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/myPIs.gif\" alt=\"My Raspberry PI Cluster\" title=\"My Raspberry PI Cluster\"></p>\n<h2 id=\"I-may-have-cheated-just-a-little-bit\"><a href=\"#I-may-have-cheated-just-a-little-bit\" class=\"headerlink\" title=\"I may have cheated just a little bit\"></a>I may have cheated just a little bit</h2><p>So, I mentioned above “mixed workload cluster with Raspberry PI’s”.  This is 100% true, but also notice there is a laptop in the mix.  I ended up using the laptop to house OpsCenter and my search/graph datacenter and I’m using the PI’s for my core Cassandra cluster.  In my experience I don’t usually install operations tools and the like directly on production devices facing the public because they have a tendency to cause unpredicatable load.  The limited RAM on the PI’s (1GB) is also a factor which I will address here in a moment.  As far as the search/graph datacenter portion I simply used the laptop out of convienence because I already had a 4-node core Cassandra cluster running on the PI’s at the time and I wanted to observe the interaction between my search/graph and Cassandra datacenters in a “pure” fashion.</p>\n<h2 id=\"Get-this-working-on-PI’s\"><a href=\"#Get-this-working-on-PI’s\" class=\"headerlink\" title=\"Get this working on PI’s\"></a>Get this working on PI’s</h2><p>Raspberry PI’s are special snowflakes when it comes to making this all work.  I will detail all this below, but here, for you, is the summarized list of what is needed.</p>\n<ol>\n<li><p><a href=\"https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html#recommendedSettingsLinux__disable-swap\">Disable swap</a><br><code>sudo swapoff -a</code> is your friend.  It is also the quick and dirty way, not permanent on reboot.  Take a look at the “Disable swapping” section of <a href=\"http://ideaheap.com/2013/07/stopping-sd-card-corruption-on-a-raspberry-pi/\">this post</a> if you would like a more permanent solution.</p>\n</li>\n<li><p>Go Headless<br>This is quite easy to do using <code>sudo raspi-config</code> while ssh’d into your PI and it will help free up enough memory to make things stable.  Just make sure you already know your PI’s IP address or know how to find it if things go sour.</p>\n</li>\n<li><p>Decrease RAM allocated to datastax-agent from <code>128MB to 64MB</code><br>Edit <code>datastax-agent-env.sh</code> located in [your datastax-agent install dir]/conf/datastax-agent-env.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">From:</div><div class=\"line\">JVM_OPTS=<span class=\"string\">\"<span class=\"variable\">$JVM_OPTS</span> -Xmx128M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"</span></div><div class=\"line\"></div><div class=\"line\">To:</div><div class=\"line\">JVM_OPTS=<span class=\"string\">\"<span class=\"variable\">$JVM_OPTS</span> -Xmx64M -Djclouds.mpu.parts.magnitude=100000 -Djclouds.mpu.parts.size=16777216\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Explicitly set Java HEAP settings for Cassandra node<br>Edit <code>cassandra-env.sh</code> located in [your DSE install dir]/resources/cassandra/conf/cassandra-env.sh.  Search for “HEAP” to find and edit the lines.  Notice mine are already set to the working values.  These are commented out by default which will allow the script to calculate values for you, but for our PI case we cannot use the calculated values.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAX_HEAP_SIZE=<span class=\"string\">\"200M\"</span></div><div class=\"line\">HEAP_NEWSIZE=<span class=\"string\">\"50M\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://docs.datastax.com/en/opscenter/6.0/opsc/configure/opscStoringCollectionDataDifferentCluster_t.html\">Store collection data on a separate cluster</a><br>Remember that part about “cheating” with my <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\">OpsCenter</a> laptop?  Yup, this is part of it.  I’ll give more details down below.</p>\n</li>\n</ol>\n<h2 id=\"Let’s-talk-about-OpsCenter-agents-memory-disk-speed-and-mucho-frustrationo\"><a href=\"#Let’s-talk-about-OpsCenter-agents-memory-disk-speed-and-mucho-frustrationo\" class=\"headerlink\" title=\"Let’s talk about OpsCenter, agents, memory, disk speed, and mucho frustrationo\"></a>Let’s talk about OpsCenter, agents, memory, disk speed, and mucho frustrationo</h2><p>That’s kind of a long list now that I see it all typed out, but there’s a lot to consider.</p>\n<p>We have nodes with <code>1GB of RAM</code>, a <code>32 bit</code> os, <code>4 cores</code>, and a <code>32GB microSD</code> drive acting as a hard disk.  This is way below the recommended values of <code>16-32GB of RAM</code>, <code>500GB-1TB</code> of fast disk, and <code>64bit</code> with <code>8 cores</code> for running Cassandra nodes, or really any database for that matter.  I wasn’t really sure how well this would work, if at all, given memory contraints alone not to mention the speed of microSD’s for a database that is known to need very fast disk.</p>\n<h3 id=\"OpsCenter\"><a href=\"#OpsCenter\" class=\"headerlink\" title=\"OpsCenter\"></a>OpsCenter</h3><p>I decided right off the bat I wanted OpsCenter in the mix.  Part of this whole project was to learn and what better way than to go whole hog and see what it could do.  If you use OpsCenter you must install <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/install/installDSagents.html\">DataStax agents</a> on each of your nodes in order for magic to happen.  That magic comes at a memory cost, not a huge one, but one that matters when only dealing with <code>1GB of RAM</code>.  In order to leave enough room for the Cassandra node itself to run I effectively cut this requirement in half.  So far, after months of running, I have not seen an issue running agents at <code>64MB of RAM</code>.<br><img src=\"/2017/02/07/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/opscenter_cluster.png\" alt=\"Laptop + PI Mixed-Workload Cluster\" title=\"Laptop + PI Mixed-Workload Cluster\"></p>\n<h3 id=\"Cassandra-memory\"><a href=\"#Cassandra-memory\" class=\"headerlink\" title=\"Cassandra memory\"></a>Cassandra memory</h3><p>The default auto caluclated memory configuration for DSE managed Cassandra nodes works well enough even on the PI’s, but there’s a catch.  Remember those agents we need for <a href=\"http://docs.datastax.com/en/latest-opscenter/opsc/about_c.html\">OpsCenter</a>?  Well, turns out the agents need just enough extra memory to push things over the edge and on a system with no swap file this means <strong>page fault</strong> which is exactly what happened.  I tried to quash every little process I could to free up enough RAM for my nodes to remain stable and I even made them headless, but to remain stable I had to explicitly configure the HEAP settings for my Cassandra nodes.  The end result is listed up above.</p>\n<h3 id=\"Headless\"><a href=\"#Headless\" class=\"headerlink\" title=\"Headless\"></a>Headless</h3><p>So, before I went headless things were working…uhh…well enough.  Not well enough that I could leave it alone really and any time the system was put under stress <strong>!BAM!</strong> I would lose a node.  This ended up being <strong>the clincher</strong>.  I noticed the Raspbian UI itself was eating up just enough RAM to prevent my nodes from allocating more in times of need.  I chopped off their heads and since then along with the other changes I made my nodes have been rock solid on the memory front.</p>\n<h3 id=\"Memory-is-good-how-about-disk\"><a href=\"#Memory-is-good-how-about-disk\" class=\"headerlink\" title=\"Memory is good how about disk?\"></a>Memory is good how about disk?</h3><p>We already talked about the swap file.  Not only is it <a href=\"https://docs.datastax.com/en/landing_page/doc/landing_page/recommendedSettingsLinux.html#recommendedSettingsLinux__disable-swap\">strongly recommended</a> to disable swap on nodes running Cassandra, but even more so on PI’s running on microSD’s.  Before I did so it was clear my nodes were struggling as even small tasks kept driving load up and upon some inspection it was obvious I/O was mostly to blame.  However, something else was lurking even after I disabled swap.  At times I would see my nodes shoot up from a load of <code>&lt;1 upwards to 10+</code>.  At this point they would usually become unresponsive and either crash or eventually come back to reality, but always, always under heavy load.</p>\n<h3 id=\"Colllleccccctionnnnnn-Daaaaatttttaaaaa\"><a href=\"#Colllleccccctionnnnnn-Daaaaatttttaaaaa\" class=\"headerlink\" title=\"Colllleccccctionnnnnn Daaaaatttttaaaaa\"></a>Colllleccccctionnnnnn Daaaaatttttaaaaa</h3><p>Sorry, couldn’t help myself.  As stated above move collection data storage off the PI’s onto a <a href=\"https://docs.datastax.com/en/opscenter/6.0/opsc/configure/opscStoringCollectionDataDifferentCluster_t.html\">separate cluster</a>.  They simply cannot handle all of the I/O associated with collecting, storing, and repairing the collection data from the rollup* tables.  Compaction was happening way too fast for the nodes to keep up most likely a result of having very little memory to work with, the PI’s could not keep up with the amount of collection data itself, and read repair on the rollup* tables was a constant, never ending stream of repair.  Once I made the switch my PI nodes all quieted down to a normal <code>load around 1</code>, things have stabilized, and   I no longer have gaps in my analytics data (except for when I <strong>HULK SMASH</strong> nodes myself for fun).</p>\n<h2 id=\"Finally-the-mixed-workload-part\"><a href=\"#Finally-the-mixed-workload-part\" class=\"headerlink\" title=\"Finally, the mixed workload part\"></a>Finally, the mixed workload part</h2><p>Yup, right there in the title and all and I haven’t really mentioned it.  Part of the reason I went and did all of this aside from learning and seeing what could be done was to extend <a href=\"http://www.luketillman.com/\">Luke Tillman’s <strong>*cough*….shame…less..plug *cooouugh*</strong></a> freaking awesome <a href=\"https://killrvideo.github.io/\">KillrVideo</a> reference app to hook up to clusters outside of its <a href=\"https://www.docker.com/\">Dockerized</a> container.  This forced me to extend my existing Cassandra cluster into a mixed workload scenario with <a href=\"http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/srch/searchOverview.html\">DSE Search</a>.  Right, I could have simply put search within the same cluster, but I was looking to emulate what I would do in a production scenario.  I have an upcoming post on this very topic coming here in the future.  I also had need to extend into <a href=\"http://www.datastax.com/products/datastax-enterprise-graph\">DSE graph</a> as well for some of my own projects so I took the opportunity to go ahead and just do it all.  The end result is a fully functional Cassandra/Search/Graph DSE managed mixed workload cluster being served up mostly on Raspberry PI’s with a little help from a laptop all hooked up to <a href=\"https://killrvideo.github.io/\">KillrVideo</a>.</p>\n<p>One last thing before I go.  I find that tailing the agent.log, opscenterd.log, and system.log files from all of the nodes is quite insightful especially when watching the interaction between the nodes when performing regular CQL, search, and graph queries.  I’m also the type of person who can watch a defrag for hours and find every little box color change useful information.  </p>\n<p>Not sure what that says about me.  </p>"}],"PostAsset":[{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/pie-pi.jpg","slug":"pie-pi.jpg","post":"cjc7se5030006fpkmc94od45a","modified":1,"renderable":0},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberry.jpg","slug":"raspberry.jpg","post":"cjc7se5030006fpkmc94od45a","modified":1,"renderable":0},{"_id":"source/_posts/Dropping-in-on-my-cluster/datastax_drop.gif","slug":"datastax_drop.gif","post":"cjc7se4zw0002fpkm7rscif5s","modified":1,"renderable":0},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/myPIs.gif","slug":"myPIs.gif","post":"cjc7se5030006fpkmc94od45a","modified":1,"renderable":0},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/opscenter_cluster.png","post":"cjc7se5030006fpkmc94od45a","slug":"opscenter_cluster.png","modified":1,"renderable":1},{"_id":"source/_posts/Mixed-Workload-DSE-Cluster-with-Raspberry-PI-s/raspberrypi.jpg","post":"cjc7se5030006fpkmc94od45a","slug":"raspberrypi.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjc7se5030006fpkmc94od45a","category_id":"cjc7se4zy0003fpkmukt5q64n","_id":"cjc7se50c0009fpkmj359imn1"},{"post_id":"cjc7se4zs0001fpkm6asl2hik","category_id":"cjc7se4zy0003fpkmukt5q64n","_id":"cjc7se50d000cfpkmj1p6yidz"},{"post_id":"cjc7se4zw0002fpkm7rscif5s","category_id":"cjc7se5050007fpkmr1thhk8m","_id":"cjc7se50e000dfpkm73djin86"},{"post_id":"cjc7se5010005fpkmohojebht","category_id":"cjc7se50c000afpkmcc4oovzg","_id":"cjc7se50f000ffpkmbcnjm7ye"}],"PostTag":[{"post_id":"cjc7se4zs0001fpkm6asl2hik","tag_id":"cjc7se5000004fpkmpnd2m1iu","_id":"cjc7se50h000ifpkmlyzh37bl"},{"post_id":"cjc7se4zs0001fpkm6asl2hik","tag_id":"cjc7se5060008fpkmt21f0bqg","_id":"cjc7se50h000jfpkmgyhrmr0x"},{"post_id":"cjc7se4zs0001fpkm6asl2hik","tag_id":"cjc7se50c000bfpkmbm6lzwyt","_id":"cjc7se50i000lfpkm3lcw1ty4"},{"post_id":"cjc7se4zs0001fpkm6asl2hik","tag_id":"cjc7se50e000efpkmtf82rtzd","_id":"cjc7se50i000mfpkmf3m8rrs6"},{"post_id":"cjc7se4zs0001fpkm6asl2hik","tag_id":"cjc7se50f000gfpkmgn32tcg6","_id":"cjc7se50j000ofpkmhl62lb13"},{"post_id":"cjc7se4zw0002fpkm7rscif5s","tag_id":"cjc7se50g000hfpkmzydacdte","_id":"cjc7se50k000rfpkm3cu5uf0v"},{"post_id":"cjc7se4zw0002fpkm7rscif5s","tag_id":"cjc7se50h000kfpkmht0fnt5f","_id":"cjc7se50k000sfpkm3rlen9oh"},{"post_id":"cjc7se4zw0002fpkm7rscif5s","tag_id":"cjc7se50j000nfpkm9jtd2ikm","_id":"cjc7se50k000ufpkmgrxkvrtn"},{"post_id":"cjc7se4zw0002fpkm7rscif5s","tag_id":"cjc7se50j000pfpkmzzl1qrjq","_id":"cjc7se50k000vfpkm3f3w5fph"},{"post_id":"cjc7se5010005fpkmohojebht","tag_id":"cjc7se50k000qfpkmsgglho0l","_id":"cjc7se50m000zfpkm0wj5yc5f"},{"post_id":"cjc7se5010005fpkmohojebht","tag_id":"cjc7se50k000tfpkme91yws19","_id":"cjc7se50m0010fpkm0x30rnn6"},{"post_id":"cjc7se5010005fpkmohojebht","tag_id":"cjc7se50l000wfpkmw6cn6wcn","_id":"cjc7se50m0012fpkm5vc7low5"},{"post_id":"cjc7se5010005fpkmohojebht","tag_id":"cjc7se50l000xfpkm881ammh6","_id":"cjc7se50m0013fpkmwzk6q1gt"},{"post_id":"cjc7se5030006fpkmc94od45a","tag_id":"cjc7se50l000yfpkml73yx89v","_id":"cjc7se50n0015fpkmt4fhv0xm"},{"post_id":"cjc7se5030006fpkmc94od45a","tag_id":"cjc7se50m0011fpkmbfutyrnl","_id":"cjc7se50o0016fpkmmmq17rqf"},{"post_id":"cjc7se5030006fpkmc94od45a","tag_id":"cjc7se50f000gfpkmgn32tcg6","_id":"cjc7se50o0017fpkmosqxwm0n"}],"Tag":[{"name":"TIL","_id":"cjc7se5000004fpkmpnd2m1iu"},{"name":"async","_id":"cjc7se5060008fpkmt21f0bqg"},{"name":"blocking","_id":"cjc7se50c000bfpkmbm6lzwyt"},{"name":"java","_id":"cjc7se50e000efpkmtf82rtzd"},{"name":"killrvideo","_id":"cjc7se50f000gfpkmgn32tcg6"},{"name":"datastax","_id":"cjc7se50g000hfpkmzydacdte"},{"name":"opscenter","_id":"cjc7se50h000kfpkmht0fnt5f"},{"name":"aerial","_id":"cjc7se50j000nfpkm9jtd2ikm"},{"name":"drop","_id":"cjc7se50j000pfpkmzzl1qrjq"},{"name":"hi there","_id":"cjc7se50k000qfpkmsgglho0l"},{"name":"welcome","_id":"cjc7se50k000tfpkme91yws19"},{"name":"fun times","_id":"cjc7se50l000wfpkmw6cn6wcn"},{"name":"OMG","_id":"cjc7se50l000xfpkm881ammh6"},{"name":"raspberry PI","_id":"cjc7se50l000yfpkml73yx89v"},{"name":"cluster","_id":"cjc7se50m0011fpkmbfutyrnl"}]}}